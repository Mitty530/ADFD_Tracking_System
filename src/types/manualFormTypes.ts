// Manual Withdrawal Request Form Types
// Defines interfaces and types for the manual data entry system

import { Currency, Priority } from './withdrawalTypes';

// Form validation states
export type ValidationState = 'idle' | 'validating' | 'valid' | 'invalid';

// Form sections for multi-step navigation
export type FormSection = 'country' | 'project' | 'financial' | 'beneficiary' | 'authorization' | 'review';

// Validation result interface
export interface ValidationResult {
  isValid: boolean;
  message?: string;
  severity?: 'error' | 'warning' | 'info';
}

// Field validation interface
export interface FieldValidation {
  [fieldName: string]: ValidationResult;
}

// Manual form data interface - comprehensive structure for all withdrawal request fields
export interface ManualFormData {
  // Auto-generated fields
  projectNumber: string;
  referenceNumber: string;
  
  // Country and Project Information
  country: string;
  projectName: string;
  projectDescription: string;
  contractReference: string;
  agreementDate: string;
  agreementParty: string;
  
  // Financial Information
  requestedAmount: string;
  currency: Currency;
  vatStatus: 'inclusive' | 'exclusive';
  paymentPurpose: string;
  valueDate: string;
  
  // Beneficiary Information
  beneficiaryName: string;
  beneficiaryAddress: string;
  
  // Banking Details
  bankName: string;
  bankAddress: string;
  accountNumber: string;
  iban: string;
  swiftCode: string;
  
  // Correspondence Bank (Optional)
  correspondenceBankName: string;
  correspondenceBankAddress: string;
  correspondenceSwiftCode: string;
  
  // Authorization
  authorizedRepresentative1: string;
  authorizedRepresentative1Title: string;
  authorizedRepresentative2: string;
  authorizedRepresentative2Title: string;
  signatureDate: string;
  
  // Additional Information
  additionalNotes: string;
  
  // System fields
  priority: Priority;
  requestDate: string;
}

// Form state interface
export interface ManualFormState {
  currentSection: FormSection;
  formData: ManualFormData;
  validation: FieldValidation;
  isSubmitting: boolean;
  hasUnsavedChanges: boolean;
  completedSections: FormSection[];
  errors: string[];
  lastSaved: Date | null;
}

// Form section configuration
export interface FormSectionConfig {
  id: FormSection;
  title: string;
  description: string;
  fields: string[];
  requiredFields: string[];
  isOptional: boolean;
  order: number;
}

// Validation rules interface
export interface ValidationRules {
  required?: boolean;
  minLength?: number;
  maxLength?: number;
  pattern?: RegExp;
  customValidator?: (value: string, formData: ManualFormData) => ValidationResult;
}

// Field configuration interface
export interface FieldConfig {
  name: keyof ManualFormData;
  label: string;
  type: 'text' | 'email' | 'tel' | 'date' | 'textarea' | 'select' | 'number';
  placeholder?: string;
  helpText?: string;
  validation: ValidationRules;
  section: FormSection;
  options?: { value: string; label: string }[];
  disabled?: boolean;
  autoGenerated?: boolean;
}

// Form submission result
export interface FormSubmissionResult {
  success: boolean;
  requestId?: string;
  errors?: string[];
  message: string;
}

// Auto-save configuration
export interface AutoSaveConfig {
  enabled: boolean;
  intervalMs: number;
  storageKey: string;
}

// Form navigation interface
export interface FormNavigation {
  canGoNext: boolean;
  canGoPrevious: boolean;
  nextSection: FormSection | null;
  previousSection: FormSection | null;
  progress: number; // 0-100
}

// Default form values
export const DEFAULT_MANUAL_FORM_DATA: ManualFormData = {
  // Auto-generated
  projectNumber: '',
  referenceNumber: '',
  
  // Country and Project
  country: '',
  projectName: '',
  projectDescription: '',
  contractReference: '',
  agreementDate: '',
  agreementParty: '',
  
  // Financial
  requestedAmount: '',
  currency: 'USD',
  vatStatus: 'exclusive',
  paymentPurpose: '',
  valueDate: '',
  
  // Beneficiary
  beneficiaryName: '',
  beneficiaryAddress: '',
  
  // Banking
  bankName: '',
  bankAddress: '',
  accountNumber: '',
  iban: '',
  swiftCode: '',
  
  // Correspondence Bank
  correspondenceBankName: '',
  correspondenceBankAddress: '',
  correspondenceSwiftCode: '',
  
  // Authorization
  authorizedRepresentative1: '',
  authorizedRepresentative1Title: '',
  authorizedRepresentative2: '',
  authorizedRepresentative2Title: '',
  signatureDate: '',
  
  // Additional
  additionalNotes: '',
  
  // System
  priority: 'medium',
  requestDate: new Date().toISOString().split('T')[0]
};

// Form sections configuration
export const FORM_SECTIONS: FormSectionConfig[] = [
  {
    id: 'country',
    title: 'Country Selection',
    description: 'Select the project country',
    fields: ['country'],
    requiredFields: ['country'],
    isOptional: false,
    order: 1
  },
  {
    id: 'project',
    title: 'Project Information',
    description: 'Enter project and agreement details',
    fields: ['projectName', 'projectDescription', 'contractReference', 'agreementDate', 'agreementParty'],
    requiredFields: ['projectName', 'contractReference'],
    isOptional: false,
    order: 2
  },
  {
    id: 'financial',
    title: 'Financial Details',
    description: 'Enter payment amount and financial information',
    fields: ['requestedAmount', 'currency', 'vatStatus', 'paymentPurpose', 'valueDate'],
    requiredFields: ['requestedAmount', 'paymentPurpose', 'valueDate'],
    isOptional: false,
    order: 3
  },
  {
    id: 'beneficiary',
    title: 'Beneficiary & Banking',
    description: 'Enter beneficiary and banking details',
    fields: ['beneficiaryName', 'beneficiaryAddress', 'bankName', 'bankAddress', 'accountNumber', 'iban', 'swiftCode'],
    requiredFields: ['beneficiaryName', 'bankName', 'iban', 'swiftCode'],
    isOptional: false,
    order: 4
  },
  {
    id: 'authorization',
    title: 'Authorization',
    description: 'Enter authorized representatives and signatures',
    fields: ['authorizedRepresentative1', 'authorizedRepresentative1Title', 'authorizedRepresentative2', 'authorizedRepresentative2Title', 'signatureDate'],
    requiredFields: ['authorizedRepresentative1', 'signatureDate'],
    isOptional: false,
    order: 5
  },
  {
    id: 'review',
    title: 'Review & Submit',
    description: 'Review all information before submission',
    fields: ['additionalNotes'],
    requiredFields: [],
    isOptional: true,
    order: 6
  }
];

// Countries supported by ADFD (matching existing system)
export const ADFD_COUNTRIES = [
  { value: 'afghanistan', label: 'Afghanistan' },
  { value: 'bangladesh', label: 'Bangladesh' },
  { value: 'egypt', label: 'Egypt' },
  { value: 'jordan', label: 'Jordan' },
  { value: 'lebanon', label: 'Lebanon' },
  { value: 'morocco', label: 'Morocco' },
  { value: 'pakistan', label: 'Pakistan' },
  { value: 'palestine', label: 'Palestine' },
  { value: 'sudan', label: 'Sudan' },
  { value: 'tunisia', label: 'Tunisia' },
  { value: 'yemen', label: 'Yemen' },
  { value: 'algeria', label: 'Algeria' },
  { value: 'iraq', label: 'Iraq' },
  { value: 'syria', label: 'Syria' },
  { value: 'libya', label: 'Libya' },
  { value: 'mauritania', label: 'Mauritania' }
];

// Currency options
export const CURRENCY_OPTIONS = [
  { value: 'USD', label: 'USD - US Dollar' },
  { value: 'EUR', label: 'EUR - Euro' },
  { value: 'AED', label: 'AED - UAE Dirham' }
];

// VAT status options
export const VAT_STATUS_OPTIONS = [
  { value: 'inclusive', label: 'VAT Inclusive' },
  { value: 'exclusive', label: 'VAT Exclusive' }
];

// Priority options
export const PRIORITY_OPTIONS = [
  { value: 'low', label: 'Low Priority' },
  { value: 'medium', label: 'Medium Priority' },
  { value: 'high', label: 'High Priority' },
  { value: 'urgent', label: 'Urgent Priority' }
];
