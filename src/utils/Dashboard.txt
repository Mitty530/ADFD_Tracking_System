import React, { useState, useEffect } from 'react';
import { Bell, Eye, Upload, Download, MessageCircle, Search, Plus, LogOut, Calendar, DollarSign, Clock, CheckCircle, AlertCircle, XCircle, Pause, ArrowRight, TrendingUp, Activity, FileText, Users, Lock, Shield } from 'lucide-react';

const mockUsers = {
  'archive001': { id: 1, username: 'archive001', name: 'Sarah Archive', role: 'archive', email: 'sarah@company.com', avatar: '👩‍💼' },
  'admin001': { id: 2, username: 'admin001', name: 'John Administrator', role: 'loan_admin', email: 'john@company.com', avatar: '👨‍💼' },
  'ops001': { id: 3, username: 'ops001', name: 'Mike Operations', role: 'operations', email: 'mike@company.com', avatar: '👨‍🔧' },
  'bank001': { id: 4, username: 'bank001', name: 'Lisa Banking', role: 'core_banking', email: 'lisa@company.com', avatar: '👩‍💻' }
};

const mockRequests = [
  {
    id: 1001,
    projectNumber: '1001',
    country: 'Country A',
    refNumber: 'REF/001',
    beneficiaryName: 'Company Alpha',
    amount: 1200000,
    currency: 'USD',
    valueDate: '2025-05-12',
    status: 'Disbursed',
    currentStage: 'disbursed',
    assignedTo: 4,
    createdBy: 1,
    createdAt: '2025-05-10T09:00:00Z',
    updatedAt: '2025-05-15T14:30:00Z',
    processingDays: 5,
    priority: 'high'
  },
  {
    id: 1002,
    projectNumber: '1002',
    country: 'Country B',
    refNumber: 'REF/002',
    beneficiaryName: 'Company Beta',
    amount: 850000,
    currency: 'EUR',
    valueDate: '2025-05-07',
    status: 'Pending due to expired withdrawal date; extension request sent to legal for review',
    currentStage: 'technical_review',
    assignedTo: 3,
    createdBy: 1,
    createdAt: '2025-05-05T10:15:00Z',
    updatedAt: '2025-05-08T16:20:00Z',
    processingDays: 15,
    priority: 'urgent'
  },
  {
    id: 1003,
    projectNumber: '1003',
    country: 'Country C',
    refNumber: 'REF/003',
    beneficiaryName: 'Company Gamma',
    amount: 550000,
    currency: 'USD',
    valueDate: '2025-05-13',
    status: 'Pending with Operations for technical approval',
    currentStage: 'technical_review',
    assignedTo: 3,
    createdBy: 1,
    createdAt: '2025-05-11T11:30:00Z',
    updatedAt: '2025-05-12T09:45:00Z',
    processingDays: 8,
    priority: 'medium'
  },
  {
    id: 1004,
    projectNumber: '1004',
    country: 'Country D',
    refNumber: 'REF/004',
    beneficiaryName: 'Company Delta',
    amount: 980000,
    currency: 'USD',
    valueDate: '2025-05-15',
    status: 'Awaiting authorized signature verification from beneficiary',
    currentStage: 'core_banking',
    assignedTo: 4,
    createdBy: 1,
    createdAt: '2025-05-13T14:20:00Z',
    updatedAt: '2025-05-14T11:10:00Z',
    processingDays: 6,
    priority: 'high'
  },
  {
    id: 1005,
    projectNumber: '1005',
    country: 'Country E',
    refNumber: 'REF/005',
    beneficiaryName: 'Company Epsilon',
    amount: 1500000,
    currency: 'EUR',
    valueDate: '2025-05-13',
    status: 'Pending with Core Banking; under disbursement review',
    currentStage: 'core_banking',
    assignedTo: 4,
    createdBy: 1,
    createdAt: '2025-05-11T16:45:00Z',
    updatedAt: '2025-05-13T13:25:00Z',
    processingDays: 7,
    priority: 'medium'
  },
  {
    id: 1006,
    projectNumber: '1006',
    country: 'Country F',
    refNumber: 'REF/006',
    beneficiaryName: 'Company Zeta',
    amount: 600000,
    currency: 'USD',
    valueDate: '2025-05-13',
    status: 'Sent back to beneficiary for missing documentation',
    currentStage: 'initial_review',
    assignedTo: 2,
    createdBy: 1,
    createdAt: '2025-05-12T08:30:00Z',
    updatedAt: '2025-05-13T10:15:00Z',
    processingDays: 9,
    priority: 'low'
  },
  {
    id: 1007,
    projectNumber: '1007',
    country: 'Country G',
    refNumber: 'REF/007',
    beneficiaryName: 'Company Eta',
    amount: 720000,
    currency: 'USD',
    valueDate: '2025-05-15',
    status: 'Disbursed',
    currentStage: 'disbursed',
    assignedTo: 4,
    createdBy: 1,
    createdAt: '2025-05-13T12:00:00Z',
    updatedAt: '2025-05-15T15:45:00Z',
    processingDays: 2,
    priority: 'medium'
  },
  {
    id: 1008,
    projectNumber: '1008',
    country: 'Country H',
    refNumber: 'REF/008',
    beneficiaryName: 'Company Theta',
    amount: 450000,
    currency: 'USD',
    valueDate: '2025-05-14',
    status: 'Ready for technical review',
    currentStage: 'initial_review',
    assignedTo: 2,
    createdBy: 1,
    createdAt: '2025-05-12T15:20:00Z',
    updatedAt: '2025-05-13T14:30:00Z',
    processingDays: 6,
    priority: 'medium'
  }
];

const mockDocuments = {
  1001: [
    { id: 1, filename: 'Withdrawal_Form_REF001.pdf', fileSize: '2.3 MB', uploadedAt: '2025-05-10T09:15:00Z', uploadedBy: 1 },
    { id: 2, filename: 'Invoice_Alpha_001.pdf', fileSize: '1.8 MB', uploadedAt: '2025-05-10T09:16:00Z', uploadedBy: 1 },
    { id: 3, filename: 'Supporting_Documents.pdf', fileSize: '3.1 MB', uploadedAt: '2025-05-10T09:17:00Z', uploadedBy: 1 }
  ],
  1002: [
    { id: 4, filename: 'Withdrawal_Form_REF002.pdf', fileSize: '2.1 MB', uploadedAt: '2025-05-05T10:20:00Z', uploadedBy: 1 },
    { id: 5, filename: 'Invoice_Beta_001.pdf', fileSize: '1.9 MB', uploadedAt: '2025-05-05T10:21:00Z', uploadedBy: 1 },
    { id: 6, filename: 'Authorization_Letter.pdf', fileSize: '0.8 MB', uploadedAt: '2025-05-05T10:22:00Z', uploadedBy: 1 }
  ]
};

const mockComments = {
  1002: [
    { id: 1, userId: 3, comment: 'Withdrawal date has expired. Requesting extension from legal team.', createdAt: '2025-05-08T14:30:00Z' },
    { id: 2, userId: 2, comment: 'Extension request documentation sent to beneficiary.', createdAt: '2025-05-08T16:20:00Z' }
  ],
  1003: [
    { id: 3, userId: 3, comment: 'Technical review in progress. Checking project eligibility requirements.', createdAt: '2025-05-12T10:15:00Z' }
  ]
};

const mockAuditLog = {
  1002: [
    { id: 1, userId: 1, action: 'Request created', timestamp: '2025-05-05T10:15:00Z' },
    { id: 2, userId: 1, action: 'Documents uploaded', timestamp: '2025-05-05T10:22:00Z' },
    { id: 3, userId: 2, action: 'Request details populated', timestamp: '2025-05-06T09:30:00Z' },
    { id: 4, userId: 2, action: 'Status updated to Technical Review', timestamp: '2025-05-06T09:35:00Z' },
    { id: 5, userId: 3, action: 'Flagged expiry issue', timestamp: '2025-05-08T14:30:00Z' },
    { id: 6, userId: 3, action: 'Extension request initiated', timestamp: '2025-05-08T16:20:00Z' }
  ]
};

const WithdrawalRequestTracker = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [actionToPerform, setActionToPerform] = useState(null);
  const [requests, setRequests] = useState(mockRequests);
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterCountry, setFilterCountry] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateRequest, setShowCreateRequest] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [animateStats, setAnimateStats] = useState(false);

  useEffect(() => {
    setAnimateStats(true);
    setTimeout(() => setAnimateStats(false), 1000);
  }, []);

  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        if (showModal) setShowModal(false);
        if (showLoginModal) setShowLoginModal(false);
        if (showCreateRequest) setShowCreateRequest(false);
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => document.removeEventListener('keydown', handleEscKey);
  }, [showModal, showLoginModal, showCreateRequest]);

  useEffect(() => {
    if (showModal || showLoginModal || showCreateRequest) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [showModal, showLoginModal, showCreateRequest]);

  const validateStrictPermission = (action, request, user) => {
    switch (action) {
      case 'create_request':
        return user.role === 'archive';
      case 'approve':
      case 'reject':
        return user.role === 'operations' && request.currentStage === 'technical_review';
      case 'disburse':
        return user.role === 'core_banking' && request.currentStage === 'core_banking';
      default:
        return false;
    }
  };

  const handleLoginForAction = (action, request = null) => {
    setActionToPerform({ action, request });
    setShowLoginModal(true);
  };

  const handleLogin = (username) => {
    const user = mockUsers[username];
    setCurrentUser(user);
    setShowLoginModal(false);
    
    if (actionToPerform) {
      executeAction(actionToPerform.action, actionToPerform.request, user);
      setActionToPerform(null);
    }
  };

  const executeAction = (action, request, user) => {
    const hasPermission = validateStrictPermission(action, request, user);
    
    if (!hasPermission) {
      alert(`ACCESS DENIED: Only ${getRequiredRole(action)} can perform this action. Your role (${user.role.replace('_', ' ')}) is not authorized.`);
      return;
    }

    switch (action) {
      case 'create_request':
        if (user.role !== 'archive') {
          alert('ACCESS DENIED: Only Archive Team can create new requests.');
          return;
        }
        setShowCreateRequest(true);
        break;
      case 'approve':
        if (user.role !== 'operations') {
          alert('ACCESS DENIED: Only Operations Team can approve requests.');
          return;
        }
        updateRequestStatus(request.id, 'Approved - Sent to Core Banking', 'core_banking');
        break;
      case 'reject':
        if (user.role !== 'operations') {
          alert('ACCESS DENIED: Only Operations Team can reject requests.');
          return;
        }
        updateRequestStatus(request.id, 'Rejected by Operations', 'initial_review');
        break;
      case 'disburse':
        if (user.role !== 'core_banking') {
          alert('ACCESS DENIED: Only Core Banking Team can mark disbursements.');
          return;
        }
        updateRequestStatus(request.id, 'Disbursed', 'disbursed');
        break;
      default:
        alert('Invalid action requested.');
    }
  };

  const handleLogout = () => {
    setCurrentUser(null);
  };

  const getFilteredRequests = () => {
    let filtered = requests;

    if (filterStatus !== 'all') {
      filtered = filtered.filter(req => req.currentStage === filterStatus);
    }

    if (filterCountry !== 'all') {
      filtered = filtered.filter(req => req.country === filterCountry);
    }

    if (searchTerm) {
      filtered = filtered.filter(req => 
        req.refNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        req.beneficiaryName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        req.projectNumber.includes(searchTerm)
      );
    }

    return filtered;
  };

  const getDashboardStats = () => {
    const allRequests = requests;
    const totalRequests = allRequests.length;
    const pendingRequests = allRequests.filter(req => req.currentStage !== 'disbursed').length;
    const avgProcessingTime = Math.round(allRequests.reduce((acc, req) => acc + req.processingDays, 0) / totalRequests);
    const dueSoon = allRequests.filter(req => {
      const valueDate = new Date(req.valueDate);
      const today = new Date();
      const diffDays = Math.ceil((valueDate - today) / (1000 * 60 * 60 * 24));
      return diffDays <= 3 && req.currentStage !== 'disbursed';
    }).length;

    return { totalRequests, pendingRequests, avgProcessingTime, dueSoon };
  };

  const getStatusIcon = (stage) => {
    switch (stage) {
      case 'disbursed': 
        return React.createElement(CheckCircle, { className: "w-5 h-5 text-emerald-500" });
      case 'core_banking': 
        return React.createElement(Clock, { className: "w-5 h-5 text-blue-500" });
      case 'technical_review': 
        return React.createElement(AlertCircle, { className: "w-5 h-5 text-amber-500" });
      case 'initial_review': 
        return React.createElement(Pause, { className: "w-5 h-5 text-orange-500" });
      default: 
        return React.createElement(XCircle, { className: "w-5 h-5 text-red-500" });
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'low': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStageProgress = (stage) => {
    const stages = ['initial_review', 'technical_review', 'core_banking', 'disbursed'];
    const currentIndex = stages.indexOf(stage);
    return stages.map((s, index) => ({
      name: s.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()),
      active: index <= currentIndex,
      current: index === currentIndex
    }));
  };

  const updateRequestStatus = (requestId, newStatus, newStage) => {
    setRequests(prev => prev.map(req => 
      req.id === requestId 
        ? { ...req, status: newStatus, currentStage: newStage, updatedAt: new Date().toISOString() }
        : req
    ));
  };

  const addComment = (requestId) => {
    if (!newComment.trim() || !currentUser) return;
    
    const comment = {
      id: Date.now(),
      userId: currentUser.id,
      comment: newComment,
      createdAt: new Date().toISOString()
    };

    if (!mockComments[requestId]) {
      mockComments[requestId] = [];
    }
    mockComments[requestId].push(comment);
    setNewComment('');
  };

  const getRequiredRole = (action) => {
    switch (action) {
      case 'create_request':
        return 'Archive Team';
      case 'approve':
      case 'reject':
        return 'Operations Team';
      case 'disburse':
        return 'Core Banking Team';
      default:
        return 'Authorized User';
    }
  };

  const getActionButtonsForRequest = (request) => {
    const buttons = [];
    
    if (request.currentStage === 'technical_review') {
      buttons.push(
        React.createElement('button', {
          key: 'approve',
          onClick: () => handleLoginForAction('approve', request),
          className: 'bg-gradient-to-r from-emerald-500 to-green-600 text-white p-3 rounded-2xl hover:from-emerald-600 hover:to-green-700 transform hover:scale-110 transition-all duration-200 shadow-lg',
          title: 'Approve (Operations Team Only)'
        }, React.createElement(CheckCircle, { className: 'w-5 h-5' }))
      );
      
      buttons.push(
        React.createElement('button', {
          key: 'reject',
          onClick: () => handleLoginForAction('reject', request),
          className: 'bg-gradient-to-r from-red-500 to-pink-500 text-white p-3 rounded-2xl hover:from-red-600 hover:to-pink-600 transform hover:scale-110 transition-all duration-200 shadow-lg',
          title: 'Reject (Operations Team Only)'
        }, React.createElement(XCircle, { className: 'w-5 h-5' }))
      );
    }

    if (request.currentStage === 'core_banking') {
      buttons.push(
        React.createElement('button', {
          key: 'disburse',
          onClick: () => handleLoginForAction('disburse', request),
          className: 'bg-gradient-to-r from-emerald-500 to-green-600 text-white p-3 rounded-2xl hover:from-emerald-600 hover:to-green-700 transform hover:scale-110 transition-all duration-200 shadow-lg',
          title: 'Mark as Disbursed (Core Banking Team Only)'
        }, React.createElement(DollarSign, { className: 'w-5 h-5' }))
      );
    }

    return buttons;
  };

  const stats = getDashboardStats();
  const filteredRequests = getFilteredRequests();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-500/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-96 h-96 bg-gradient-to-r from-pink-400/20 to-blue-500/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      <header className="relative z-10 backdrop-blur-xl bg-white/80 shadow-lg border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-20">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <DollarSign className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Withdrawal Request Tracker
                </h1>
                <p className="text-sm text-gray-600">Real-time tracking dashboard • Public viewing • Strict role-based actions</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-6">
              <button 
                onClick={() => handleLoginForAction('create_request')}
                className="bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-3 rounded-2xl hover:from-green-600 hover:to-emerald-700 flex items-center space-x-2 shadow-lg transform hover:scale-105 transition-all duration-200"
              >
                <Plus className="w-5 h-5" />
                <span className="font-medium">New Request</span>
                <span className="text-xs bg-white/20 px-2 py-1 rounded-lg">Archive Only</span>
              </button>
              
              {currentUser ? (
                <div className="flex items-center space-x-3 bg-white/50 backdrop-blur-md rounded-2xl px-4 py-3 shadow-lg">
                  <div className="w-10 h-10 bg-gradient-to-r from-blue-400 to-purple-500 rounded-xl flex items-center justify-center text-lg">
                    {currentUser.avatar}
                  </div>
                  <div>
                    <div className="text-sm font-semibold text-gray-800">{currentUser.name}</div>
                    <div className="text-xs text-gray-600 capitalize">
                      {currentUser.role.replace('_', ' ')}
                      {currentUser.role === 'loan_admin' && <span className="text-blue-600 ml-1">(View Only)</span>}
                    </div>
                  </div>
                  <button onClick={handleLogout} className="p-2 text-gray-500 hover:text-gray-700 hover:bg-white/50 rounded-xl transition-all duration-200">
                    <LogOut className="w-4 h-4" />
                  </button>
                </div>
              ) : (
                <button 
                  onClick={() => setShowLoginModal(true)}
                  className="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-2xl hover:from-blue-600 hover:to-purple-700 flex items-center space-x-2 shadow-lg transform hover:scale-105 transition-all duration-200"
                >
                  <Shield className="w-5 h-5" />
                  <span className="font-medium">Login for Actions</span>
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      <main className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="backdrop-blur-xl bg-white/80 p-6 rounded-3xl shadow-lg border border-white/20 mb-8">
          <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
            <Activity className="w-6 h-6 mr-2 text-blue-500" />
            Live Process Tracking
          </h2>
          <div className="grid grid-cols-4 gap-6">
            {[
              { stage: 'initial_review', name: 'Initial Review', count: requests.filter(r => r.currentStage === 'initial_review').length, color: 'from-orange-500 to-red-500' },
              { stage: 'technical_review', name: 'Technical Review', count: requests.filter(r => r.currentStage === 'technical_review').length, color: 'from-amber-500 to-orange-500' },
              { stage: 'core_banking', name: 'Core Banking', count: requests.filter(r => r.currentStage === 'core_banking').length, color: 'from-blue-500 to-indigo-500' },
              { stage: 'disbursed', name: 'Disbursed', count: requests.filter(r => r.currentStage === 'disbursed').length, color: 'from-emerald-500 to-green-500' }
            ].map((stage) => (
              <div key={stage.stage} className="text-center">
                <div className={`w-16 h-16 bg-gradient-to-r ${stage.color} rounded-3xl flex items-center justify-center mx-auto mb-3 shadow-lg`}>
                  <span className="text-2xl font-bold text-white">{stage.count}</span>
                </div>
                <h3 className="font-semibold text-gray-900">{stage.name}</h3>
                <p className="text-sm text-gray-600">Active requests</p>
              </div>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          {[
            { icon: DollarSign, label: 'Total Requests', value: stats.totalRequests, color: 'from-blue-500 to-blue-600', desc: 'All time' },
            { icon: Clock, label: 'Pending Review', value: stats.pendingRequests, color: 'from-amber-500 to-orange-500', desc: 'Awaiting action' },
            { icon: TrendingUp, label: 'Avg Processing', value: `${stats.avgProcessingTime} days`, color: 'from-emerald-500 to-green-600', desc: 'Current efficiency' },
            { icon: AlertCircle, label: 'Due Soon', value: stats.dueSoon, color: 'from-red-500 to-pink-500', desc: 'Urgent attention' }
          ].map((stat) => (
            <div 
              key={stat.label}
              className={`backdrop-blur-xl bg-white/80 p-6 rounded-3xl shadow-lg border border-white/20 hover:shadow-xl transform hover:scale-105 transition-all duration-300 ${animateStats ? 'animate-pulse' : ''}`}
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">{stat.label}</p>
                  <p className="text-3xl font-bold text-gray-900 mb-1">{stat.value}</p>
                  <p className="text-xs text-gray-500">{stat.desc}</p>
                </div>
                <div className={`w-12 h-12 bg-gradient-to-r ${stat.color} rounded-2xl flex items-center justify-center shadow-lg`}>
                  <stat.icon className="w-6 h-6 text-white" />
                </div>
              </div>
              <div className="mt-4 h-1 bg-gray-200 rounded-full overflow-hidden">
                <div className={`h-full bg-gradient-to-r ${stat.color}`} style={{ width: '100%' }}></div>
              </div>
            </div>
          ))}
        </div>

        <div className="backdrop-blur-xl bg-white/80 p-6 rounded-3xl shadow-lg border border-white/20 mb-8">
          <div className="flex flex-wrap items-center gap-4">
            <div className="flex items-center space-x-3 bg-white/50 rounded-2xl px-4 py-3">
              <Search className="w-5 h-5 text-gray-500" />
              <input
                type="text"
                placeholder="Search by reference, beneficiary, or project..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="bg-transparent border-none outline-none w-72 text-gray-700 placeholder-gray-500"
              />
            </div>
            
            <select 
              value={filterStatus} 
              onChange={(e) => setFilterStatus(e.target.value)}
              className="bg-white/50 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 backdrop-blur-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Status</option>
              <option value="initial_review">Initial Review</option>
              <option value="technical_review">Technical Review</option>
              <option value="core_banking">Core Banking</option>
              <option value="disbursed">Disbursed</option>
            </select>
            
            <select 
              value={filterCountry} 
              onChange={(e) => setFilterCountry(e.target.value)}
              className="bg-white/50 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 backdrop-blur-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Countries</option>
              {[...new Set(requests.map(r => r.country))].map(country => (
                <option key={country} value={country}>{country}</option>
              ))}
            </select>

            <div className="ml-auto bg-green-50 border border-green-200 rounded-2xl px-4 py-3">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-sm font-medium text-green-800">Live Tracking Active</span>
              </div>
            </div>
          </div>
        </div>

        <div className="backdrop-blur-xl bg-white/80 rounded-3xl shadow-xl border border-white/20 overflow-hidden">
          <div className="bg-gradient-to-r from-gray-50/80 to-gray-100/80 backdrop-blur-md px-6 py-4">
            <h3 className="font-bold text-gray-900 flex items-center">
              <Users className="w-5 h-5 mr-2 text-blue-500" />
              All Withdrawal Requests - Public Tracking Dashboard
            </h3>
            <p className="text-sm text-gray-600 mt-1">
              🔒 Strict role controls: Archive (create) • Operations (approve/reject) • Core Banking (disburse) • Loan Admin (view only)
            </p>
          </div>
          
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gradient-to-r from-gray-50/80 to-gray-100/80 backdrop-blur-md">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Value Date</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Project Details</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Amount</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Current Status</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Processing Time</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-100/50">
                {filteredRequests.map((request) => (
                  <tr 
                    key={request.id} 
                    className="hover:bg-white/60 transition-all duration-200 group"
                  >
                    <td className="px-6 py-6 whitespace-nowrap">
                      <div className="flex items-center">
                        <Calendar className="w-4 h-4 text-gray-400 mr-2" />
                        <span className="text-sm font-medium text-gray-900">
                          {new Date(request.valueDate).toLocaleDateString()}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-6">
                      <div className="space-y-1">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-bold text-gray-900">#{request.projectNumber}</span>
                          <span className={`px-2 py-1 text-xs font-medium rounded-lg border ${getPriorityColor(request.priority)}`}>
                            {request.priority}
                          </span>
                        </div>
                        <div className="text-sm text-gray-600">{request.country}</div>
                        <div className="text-sm font-medium text-blue-600">{request.refNumber}</div>
                        <div className="text-sm text-gray-500">{request.beneficiaryName}</div>
                      </div>
                    </td>
                    <td className="px-6 py-6 whitespace-nowrap">
                      <div className="text-lg font-bold text-gray-900">
                        {request.amount.toLocaleString()} {request.currency}
                      </div>
                    </td>
                    <td className="px-6 py-6">
                      <div className="flex items-center space-x-3 mb-2">
                        {getStatusIcon(request.currentStage)}
                        <span className="text-sm font-medium text-gray-900 capitalize">
                          {request.currentStage.replace('_', ' ')}
                        </span>
                      </div>
                      <div className="text-xs text-gray-500 bg-gray-50 rounded-lg p-2 max-w-xs">
                        {request.status.length > 60 ? `${request.status.substring(0, 60)}...` : request.status}
                      </div>
                    </td>
                    <td className="px-6 py-6 whitespace-nowrap">
                      <div className="flex items-center space-x-2">
                        <Clock className="w-4 h-4 text-gray-400" />
                        <span className="text-sm font-medium text-gray-900">{request.processingDays} days</span>
                      </div>
                    </td>
                    <td className="px-6 py-6 whitespace-nowrap">
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => {
                            setSelectedRequest(request);
                            setShowModal(true);
                          }}
                          className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-3 rounded-2xl hover:from-blue-600 hover:to-purple-700 transform hover:scale-110 transition-all duration-200 shadow-lg group-hover:shadow-xl"
                          title="View Details"
                        >
                          <Eye className="w-5 h-5" />
                        </button>

                        {getActionButtonsForRequest(request)}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </main>

      {showLoginModal && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowLoginModal(false);
            }
          }}
        >
          <div 
            className="backdrop-blur-xl bg-white/95 rounded-3xl shadow-2xl max-w-md w-full border border-white/20"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-t-3xl">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-xl font-bold">🔒 Strict Role Authentication</h2>
                  <p className="text-blue-100 text-sm">
                    {actionToPerform && `Required Role: ${getRequiredRole(actionToPerform.action)}`}
                  </p>
                </div>
                <button 
                  onClick={() => setShowLoginModal(false)} 
                  className="text-white hover:text-white bg-white/20 hover:bg-white/30 p-2 rounded-xl transition-all duration-200"
                >
                  ✕
                </button>
              </div>
            </div>
            
            <div className="p-6">
              <div className="bg-red-50 border border-red-200 rounded-2xl p-4 mb-6">
                <h3 className="font-bold text-red-800 mb-2">⚠️ Strict Access Control Rules</h3>
                <div className="text-sm text-red-700 space-y-1">
                  <div>🏛️ <strong>Archive Team:</strong> Can ONLY create new requests</div>
                  <div>👀 <strong>Loan Administrator:</strong> View-only access (no actions)</div>
                  <div>⚖️ <strong>Operations Team:</strong> Can ONLY approve/reject requests</div>
                  <div>🏦 <strong>Core Banking:</strong> Can ONLY mark disbursements</div>
                </div>
              </div>
              
              <div className="space-y-3">
                {Object.entries(mockUsers).map(([username, user]) => {
                  const canPerformCurrentAction = actionToPerform ? validateStrictPermission(actionToPerform.action, actionToPerform.request, user) : true;
                  
                  return (
                    <button
                      key={username}
                      onClick={() => handleLogin(username)}
                      disabled={!canPerformCurrentAction}
                      className={`w-full p-4 text-left rounded-2xl border transition-all duration-300 group ${
                        canPerformCurrentAction 
                          ? 'bg-white/50 hover:bg-white/70 border-white/20 hover:transform hover:scale-105' 
                          : 'bg-gray-100 border-gray-200 opacity-50 cursor-not-allowed'
                      }`}
                    >
                      <div className="flex items-center space-x-4">
                        <div className={`w-12 h-12 rounded-xl flex items-center justify-center text-xl ${
                          canPerformCurrentAction 
                            ? 'bg-gradient-to-r from-blue-400 to-purple-500' 
                            : 'bg-gray-300'
                        }`}>
                          {user.avatar}
                        </div>
                        <div className="flex-1">
                          <div className={`font-semibold ${canPerformCurrentAction ? 'text-gray-900' : 'text-gray-500'}`}>
                            {user.name}
                          </div>
                          <div className={`text-sm capitalize ${canPerformCurrentAction ? 'text-gray-600' : 'text-gray-400'}`}>
                            {user.role.replace('_', ' ')}
                            {user.role === 'loan_admin' && ' (View Only)'}
                          </div>
                          {!canPerformCurrentAction && (
                            <div className="text-xs text-red-600 font-medium mt-1">
                              ❌ Cannot perform this action
                            </div>
                          )}
                        </div>
                        {canPerformCurrentAction ? (
                          <ArrowRight className="w-5 h-5 text-gray-400 group-hover:text-gray-600 group-hover:translate-x-1 transition-all" />
                        ) : (
                          <Lock className="w-5 h-5 text-gray-400" />
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      )}

      {showModal && selectedRequest && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-start justify-center z-50 p-4 overflow-y-auto"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowModal(false);
            }
          }}
        >
          <div 
            className="backdrop-blur-xl bg-white/95 rounded-3xl shadow-2xl max-w-5xl w-full my-8 border border-white/20"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-t-3xl z-10 shadow-lg">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-2xl font-bold">Request Details</h2>
                  <p className="text-blue-100">{selectedRequest.refNumber} • Public Tracking View</p>
                </div>
                <button 
                  onClick={() => setShowModal(false)} 
                  className="text-white hover:text-white bg-white/20 hover:bg-white/30 p-3 rounded-2xl transition-all duration-200 flex items-center justify-center"
                  title="Close"
                >
                  <span className="text-xl font-bold">✕</span>
                </button>
              </div>
            </div>
            
            <div className="max-h-[80vh] overflow-y-auto">
              <div className="p-8 space-y-8">
                <div className="backdrop-blur-md bg-white/50 p-6 rounded-3xl border border-white/20">
                  <h3 className="font-bold text-gray-900 mb-4 flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-blue-500" />
                    Project Information
                  </h3>
                  <div className="grid grid-cols-2 gap-6">
                    {[
                      { label: 'Project Number', value: selectedRequest.projectNumber },
                      { label: 'Country', value: selectedRequest.country },
                      { label: 'Beneficiary', value: selectedRequest.beneficiaryName },
                      { label: 'Amount', value: `${selectedRequest.amount.toLocaleString()} ${selectedRequest.currency}` },
                      { label: 'Value Date', value: new Date(selectedRequest.valueDate).toLocaleDateString() },
                      { label: 'Processing Time', value: `${selectedRequest.processingDays} days` }
                    ].map((item) => (
                      <div key={item.label} className="space-y-1">
                        <span className="text-sm text-gray-600 font-medium">{item.label}</span>
                        <div className="text-lg font-semibold text-gray-900">{item.value}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="backdrop-blur-md bg-white/50 p-6 rounded-3xl border border-white/20">
                  <h3 className="font-bold text-gray-900 mb-6 flex items-center">
                    <Activity className="w-5 h-5 mr-2 text-blue-500" />
                    Progress Timeline
                  </h3>
                  <div className="relative">
                    <div className="flex items-center justify-between mb-6">
                      {getStageProgress(selectedRequest.currentStage).map((stage, index) => (
                        <div key={stage.name} className="flex flex-col items-center flex-1">
                          <div className={`w-12 h-12 rounded-2xl flex items-center justify-center transition-all duration-500 ${
                            stage.active 
                              ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg transform scale-110' 
                              : 'bg-gray-200 text-gray-500'
                          }`}>
                            {stage.active ? '✓' : index + 1}
                          </div>
                          <div className="mt-3 text-center">
                            <div className={`text-sm font-medium ${stage.active ? 'text-blue-600' : 'text-gray-500'}`}>
                              {stage.name}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="bg-white/70 rounded-2xl p-4 space-y-2">
                      <div className="text-sm text-gray-600">
                        <strong>Current Status:</strong> {selectedRequest.status}
                      </div>
                      <div className="text-sm text-gray-600">
                        <strong>Assigned To:</strong> {mockUsers[Object.keys(mockUsers).find(k => mockUsers[k].id === selectedRequest.assignedTo)]?.name || 'Unassigned'}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="backdrop-blur-md bg-white/50 p-6 rounded-3xl border border-white/20">
                  <h3 className="font-bold text-gray-900 mb-4 flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-blue-500" />
                    Documents
                  </h3>
                  {mockDocuments[selectedRequest.id] ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {mockDocuments[selectedRequest.id].map(doc => (
                        <div key={doc.id} className="bg-white/70 p-4 rounded-2xl border border-white/20 hover:bg-white/90 transition-all duration-200 group">
                          <div className="flex items-center space-x-3">
                            <div className="w-12 h-12 bg-gradient-to-r from-blue-400 to-purple-500 rounded-2xl flex items-center justify-center">
                              <FileText className="w-6 h-6 text-white" />
                            </div>
                            <div className="flex-1">
                              <div className="text-sm font-semibold text-gray-900">{doc.filename}</div>
                              <div className="text-xs text-gray-500">{doc.fileSize}</div>
                            </div>
                            <button className="text-blue-600 hover:text-blue-800 p-2 hover:bg-blue-50 rounded-xl transition-all duration-200 group-hover:scale-110">
                              <Download className="w-5 h-5" />
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <FileText className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                      <p>No documents uploaded</p>
                    </div>
                  )}
                </div>

                <div className="backdrop-blur-md bg-white/50 p-6 rounded-3xl border border-white/20">
                  <h3 className="font-bold text-gray-900 mb-4 flex items-center">
                    <MessageCircle className="w-5 h-5 mr-2 text-blue-500" />
                    Comments & Activity
                  </h3>
                  {mockComments[selectedRequest.id] ? (
                    <div className="space-y-4 mb-6">
                      {mockComments[selectedRequest.id].map(comment => (
                        <div key={comment.id} className="bg-white/70 p-4 rounded-2xl border border-white/20">
                          <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-semibold text-gray-900">
                              {mockUsers[Object.keys(mockUsers).find(k => mockUsers[k].id === comment.userId)]?.name}
                            </span>
                            <span className="text-xs text-gray-500">
                              {new Date(comment.createdAt).toLocaleString()}
                            </span>
                          </div>
                          <div className="text-sm text-gray-700">{comment.comment}</div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500 mb-6">
                      <MessageCircle className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                      <p>No comments yet</p>
                    </div>
                  )}
                  
                  {currentUser ? (
                    <div className="flex space-x-3">
                      <input
                        type="text"
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="Add a comment..."
                        className="flex-1 bg-white/70 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 backdrop-blur-md"
                      />
                      <button 
                        onClick={() => addComment(selectedRequest.id)}
                        className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-3 rounded-2xl hover:from-blue-600 hover:to-purple-700 shadow-lg transform hover:scale-105 transition-all duration-200"
                      >
                        <MessageCircle className="w-5 h-5" />
                      </button>
                    </div>
                  ) : (
                    <div className="bg-blue-50 border border-blue-200 rounded-2xl p-4 text-center">
                      <Lock className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                      <p className="text-blue-800 font-medium">Login required to add comments</p>
                      <button 
                        onClick={() => setShowLoginModal(true)}
                        className="mt-2 text-blue-600 hover:text-blue-800 font-medium"
                      >
                        Login Now
                      </button>
                    </div>
                  )}
                </div>

                <div className="backdrop-blur-md bg-white/50 p-6 rounded-3xl border border-white/20">
                  <h3 className="font-bold text-gray-900 mb-4 flex items-center">
                    <Activity className="w-5 h-5 mr-2 text-blue-500" />
                    Audit Trail
                  </h3>
                  {mockAuditLog[selectedRequest.id] ? (
                    <div className="space-y-3">
                      {mockAuditLog[selectedRequest.id].map(entry => (
                        <div key={entry.id} className="flex items-center justify-between py-3 border-b border-gray-200/50 last:border-b-0">
                          <div className="flex items-center space-x-4">
                            <div className="w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full animate-pulse"></div>
                            <span className="text-sm font-medium text-gray-700">{entry.action}</span>
                            <span className="text-sm text-gray-500">
                              by {mockUsers[Object.keys(mockUsers).find(k => mockUsers[k].id === entry.userId)]?.name}
                            </span>
                          </div>
                          <span className="text-xs text-gray-500 flex items-center">
                            <Clock className="w-3 h-3 mr-1" />
                            {new Date(entry.timestamp).toLocaleString()}
                          </span>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <Activity className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                      <p>No audit entries</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {showCreateRequest && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-start justify-center z-50 p-4 overflow-y-auto"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowCreateRequest(false);
            }
          }}
        >
          <div 
            className="backdrop-blur-xl bg-white/95 rounded-3xl shadow-2xl max-w-3xl w-full my-8 border border-white/20"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-6 rounded-t-3xl">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-2xl font-bold">🏛️ Create New Withdrawal Request</h2>
                  <p className="text-green-100">
                    Logged in as: {currentUser?.name} ({currentUser?.role.replace('_', ' ')}) 
                    {currentUser?.role === 'archive' ? ' ✅ Authorized' : ' ❌ Not Authorized'}
                  </p>
                </div>
                <button 
                  onClick={() => setShowCreateRequest(false)} 
                  className="text-white hover:text-white bg-white/20 hover:bg-white/30 p-3 rounded-2xl transition-all duration-200 flex items-center justify-center"
                  title="Close"
                >
                  <span className="text-xl font-bold">✕</span>
                </button>
              </div>
            </div>
            
            <div className="p-8">
              {currentUser?.role !== 'archive' ? (
                <div className="bg-red-50 border-2 border-red-200 rounded-3xl p-8 text-center">
                  <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Lock className="w-8 h-8 text-red-500" />
                  </div>
                  <h3 className="text-xl font-bold text-red-800 mb-2">Access Denied</h3>
                  <p className="text-red-700 mb-4">
                    Only <strong>Archive Team</strong> members can create new withdrawal requests.
                  </p>
                  <p className="text-red-600 text-sm">
                    Your role: <strong>{currentUser?.role.replace('_', ' ')}</strong> - Not authorized for this action.
                  </p>
                  <button 
                    onClick={() => setShowCreateRequest(false)}
                    className="mt-4 bg-red-600 text-white px-6 py-3 rounded-2xl hover:bg-red-700 transition-all duration-200"
                  >
                    Close
                  </button>
                </div>
              ) : (
                <div className="space-y-6">
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Project Number</label>
                      <input 
                        type="text" 
                        className="w-full bg-white/70 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 backdrop-blur-md" 
                        placeholder="e.g., 1009" 
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Country</label>
                      <input 
                        type="text" 
                        className="w-full bg-white/70 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 backdrop-blur-md" 
                        placeholder="e.g., Country X" 
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Reference Number</label>
                      <input 
                        type="text" 
                        className="w-full bg-white/70 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 backdrop-blur-md" 
                        placeholder="e.g., REF/009" 
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Beneficiary Name</label>
                      <input 
                        type="text" 
                        className="w-full bg-white/70 border border-white/20 rounded-2xl px-4 py-3 text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 backdrop-blur-md" 
                        placeholder="e.g., Company Lambda" 
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Documents</label>
                    <div className="border-2 border-dashed border-green-300 bg-green-50/50 rounded-3xl p-8 text-center hover:border-green-400 hover:bg-green-50/70 transition-all duration-200 cursor-pointer group">
                      <div className="transform group-hover:scale-110 transition-transform duration-200">
                        <Upload className="w-12 h-12 text-green-500 mx-auto mb-4" />
                        <p className="text-lg font-medium text-gray-700 mb-2">Click to upload or drag and drop</p>
                        <p className="text-sm text-gray-500">PDF files only • Max 10MB per file</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex justify-end space-x-4 pt-6">
                    <button 
                      onClick={() => setShowCreateRequest(false)}
                      className="px-6 py-3 border border-gray-300 rounded-2xl text-gray-700 hover:bg-gray-50 transition-all duration-200"
                    >
                      Cancel
                    </button>
                    <button 
                      onClick={() => {
                        setShowCreateRequest(false);
                        alert('✅ Request created successfully! It will appear in the tracking dashboard momentarily.');
                      }}
                      className="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl hover:from-green-600 hover:to-emerald-700 shadow-lg transform hover:scale-105 transition-all duration-200"
                    >
                      Create Request
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WithdrawalRequestTracker;