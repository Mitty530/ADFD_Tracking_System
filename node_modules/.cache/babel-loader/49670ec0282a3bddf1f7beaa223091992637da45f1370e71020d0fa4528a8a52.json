{"ast":null,"code":"import { supabase } from './supabase';\n\n// Database Types\n\n// Database Operations\nexport class DatabaseService {\n  // User Profile Operations\n  static async getUserProfile(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('user_profiles').select('*').eq('id', userId).single();\n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n    return data;\n  }\n  static async createUserProfile(profile) {\n    const {\n      data,\n      error\n    } = await supabase.from('user_profiles').insert(profile).select().single();\n    if (error) {\n      console.error('Error creating user profile:', error);\n      return null;\n    }\n    return data;\n  }\n  static async updateUserProfile(userId, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('user_profiles').update({\n      ...updates,\n      updated_at: new Date().toISOString()\n    }).eq('id', userId).select().single();\n    if (error) {\n      console.error('Error updating user profile:', error);\n      return null;\n    }\n    return data;\n  }\n\n  // Withdrawal Request Operations\n  static async getWithdrawalRequests(filters) {\n    let query = supabase.from('withdrawal_requests').select('*');\n    if (filters !== null && filters !== void 0 && filters.status) {\n      query = query.eq('status', filters.status);\n    }\n    if (filters !== null && filters !== void 0 && filters.region) {\n      query = query.eq('region', filters.region);\n    }\n    if (filters !== null && filters !== void 0 && filters.assigned_to) {\n      query = query.eq('assigned_to', filters.assigned_to);\n    }\n    if (filters !== null && filters !== void 0 && filters.created_by) {\n      query = query.eq('created_by', filters.created_by);\n    }\n    const {\n      data,\n      error\n    } = await query.order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error fetching withdrawal requests:', error);\n      return [];\n    }\n    return data || [];\n  }\n  static async createWithdrawalRequest(request) {\n    const {\n      data,\n      error\n    } = await supabase.from('withdrawal_requests').insert(request).select().single();\n    if (error) {\n      console.error('Error creating withdrawal request:', error);\n      return null;\n    }\n    return data;\n  }\n  static async updateWithdrawalRequest(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('withdrawal_requests').update({\n      ...updates,\n      updated_at: new Date().toISOString()\n    }).eq('id', id).select().single();\n    if (error) {\n      console.error('Error updating withdrawal request:', error);\n      return null;\n    }\n    return data;\n  }\n\n  // User Session Operations\n  static async createUserSession(session) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_sessions').insert(session).select().single();\n      if (error) {\n        console.warn('Error creating user session (database may not be set up):', error.message);\n        return null;\n      }\n      return data;\n    } catch (error) {\n      console.warn('Database operation failed, continuing without session tracking');\n      return null;\n    }\n  }\n  static async updateUserSession(sessionId, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('user_sessions').update({\n      ...updates,\n      last_activity: new Date().toISOString()\n    }).eq('id', sessionId).select().single();\n    if (error) {\n      console.error('Error updating user session:', error);\n      return null;\n    }\n    return data;\n  }\n  static async endUserSession(sessionId) {\n    const {\n      error\n    } = await supabase.from('user_sessions').update({\n      logout_at: new Date().toISOString(),\n      is_active: false\n    }).eq('id', sessionId);\n    if (error) {\n      console.error('Error ending user session:', error);\n      return false;\n    }\n    return true;\n  }\n\n  // Real-time Subscriptions\n  static subscribeToWithdrawalRequests(callback) {\n    return supabase.channel('withdrawal_requests_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'withdrawal_requests'\n    }, callback).subscribe();\n  }\n  static subscribeToAuditLogs(callback) {\n    return supabase.channel('audit_logs_changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'audit_logs'\n    }, callback).subscribe();\n  }\n}","map":{"version":3,"names":["supabase","DatabaseService","getUserProfile","userId","data","error","from","select","eq","single","console","createUserProfile","profile","insert","updateUserProfile","updates","update","updated_at","Date","toISOString","getWithdrawalRequests","filters","query","status","region","assigned_to","created_by","order","ascending","createWithdrawalRequest","request","updateWithdrawalRequest","id","createUserSession","session","warn","message","updateUserSession","sessionId","last_activity","endUserSession","logout_at","is_active","subscribeToWithdrawalRequests","callback","channel","on","event","schema","table","subscribe","subscribeToAuditLogs"],"sources":["C:/Users/Ousmane/Documents/TrackingSystem/ADFD_Tracking_System/src/lib/database.ts"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\n// Database Types\r\nexport interface UserProfile {\r\n  id: string;\r\n  full_name: string;\r\n  email: string;\r\n  role: string;\r\n  department: string;\r\n  region?: string;\r\n  regional_countries?: string[];\r\n  can_create_requests: boolean;\r\n  can_approve_reject: boolean;\r\n  can_disburse: boolean;\r\n  view_only_access: boolean;\r\n  is_active: boolean;\r\n  avatar_url?: string;\r\n  created_by?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WithdrawalRequest {\r\n  id: number;\r\n  project_number: string;\r\n  country: string;\r\n  region: string;\r\n  ref_number: string;\r\n  beneficiary_name: string;\r\n  amount: number;\r\n  currency: string;\r\n  value_date: string;\r\n  status: string;\r\n  current_stage: string;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  assigned_to?: string;\r\n  created_by: string;\r\n  beneficiary_bank?: string;\r\n  bank_account?: string;\r\n  iban?: string;\r\n  swift_code?: string;\r\n  agreement_date?: string;\r\n  processing_days: number;\r\n  sla_deadline?: string;\r\n  is_overdue: boolean;\r\n  requires_extension: boolean;\r\n  total_pending_amount?: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  completed_at?: string;\r\n}\r\n\r\nexport interface AuditLog {\r\n  id: number;\r\n  request_id?: number;\r\n  user_id: string;\r\n  action_type: 'create' | 'approve' | 'reject' | 'disburse' | 'comment' | 'assign' | 'login' | 'logout' | 'view' | 'navigate' | 'update';\r\n  action_details: string;\r\n  previous_stage?: string;\r\n  new_stage?: string;\r\n  previous_status?: string;\r\n  new_status?: string;\r\n  amount_involved?: number;\r\n  regional_context?: string;\r\n  metadata?: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  session_id?: string;\r\n  page_url?: string;\r\n  created_at: string;\r\n  processing_context?: Record<string, any>;\r\n}\r\n\r\nexport interface UserSession {\r\n  id: string;\r\n  user_id: string;\r\n  session_token: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  login_at: string;\r\n  logout_at?: string;\r\n  last_activity: string;\r\n  is_active: boolean;\r\n  remember_me: boolean;\r\n}\r\n\r\n// Database Operations\r\nexport class DatabaseService {\r\n  // User Profile Operations\r\n  static async getUserProfile(userId: string): Promise<UserProfile | null> {\r\n    const { data, error } = await supabase\r\n      .from('user_profiles')\r\n      .select('*')\r\n      .eq('id', userId)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  static async createUserProfile(profile: Partial<UserProfile>): Promise<UserProfile | null> {\r\n    const { data, error } = await supabase\r\n      .from('user_profiles')\r\n      .insert(profile)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating user profile:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  static async updateUserProfile(userId: string, updates: Partial<UserProfile>): Promise<UserProfile | null> {\r\n    const { data, error } = await supabase\r\n      .from('user_profiles')\r\n      .update({ ...updates, updated_at: new Date().toISOString() })\r\n      .eq('id', userId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error updating user profile:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  // Withdrawal Request Operations\r\n  static async getWithdrawalRequests(filters?: {\r\n    status?: string;\r\n    region?: string;\r\n    assigned_to?: string;\r\n    created_by?: string;\r\n  }): Promise<WithdrawalRequest[]> {\r\n    let query = supabase.from('withdrawal_requests').select('*');\r\n\r\n    if (filters?.status) {\r\n      query = query.eq('status', filters.status);\r\n    }\r\n    if (filters?.region) {\r\n      query = query.eq('region', filters.region);\r\n    }\r\n    if (filters?.assigned_to) {\r\n      query = query.eq('assigned_to', filters.assigned_to);\r\n    }\r\n    if (filters?.created_by) {\r\n      query = query.eq('created_by', filters.created_by);\r\n    }\r\n\r\n    const { data, error } = await query.order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      console.error('Error fetching withdrawal requests:', error);\r\n      return [];\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  static async createWithdrawalRequest(request: Partial<WithdrawalRequest>): Promise<WithdrawalRequest | null> {\r\n    const { data, error } = await supabase\r\n      .from('withdrawal_requests')\r\n      .insert(request)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error creating withdrawal request:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  static async updateWithdrawalRequest(id: number, updates: Partial<WithdrawalRequest>): Promise<WithdrawalRequest | null> {\r\n    const { data, error } = await supabase\r\n      .from('withdrawal_requests')\r\n      .update({ ...updates, updated_at: new Date().toISOString() })\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error updating withdrawal request:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  // User Session Operations\r\n  static async createUserSession(session: Partial<UserSession>): Promise<UserSession | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_sessions')\r\n        .insert(session)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.warn('Error creating user session (database may not be set up):', error.message);\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.warn('Database operation failed, continuing without session tracking');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static async updateUserSession(sessionId: string, updates: Partial<UserSession>): Promise<UserSession | null> {\r\n    const { data, error } = await supabase\r\n      .from('user_sessions')\r\n      .update({ ...updates, last_activity: new Date().toISOString() })\r\n      .eq('id', sessionId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Error updating user session:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  static async endUserSession(sessionId: string): Promise<boolean> {\r\n    const { error } = await supabase\r\n      .from('user_sessions')\r\n      .update({ \r\n        logout_at: new Date().toISOString(),\r\n        is_active: false \r\n      })\r\n      .eq('id', sessionId);\r\n\r\n    if (error) {\r\n      console.error('Error ending user session:', error);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Real-time Subscriptions\r\n  static subscribeToWithdrawalRequests(callback: (payload: any) => void) {\r\n    return supabase\r\n      .channel('withdrawal_requests_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'withdrawal_requests' }, \r\n        callback\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  static subscribeToAuditLogs(callback: (payload: any) => void) {\r\n    return supabase\r\n      .channel('audit_logs_changes')\r\n      .on('postgres_changes', \r\n        { event: '*', schema: 'public', table: 'audit_logs' }, \r\n        callback\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}