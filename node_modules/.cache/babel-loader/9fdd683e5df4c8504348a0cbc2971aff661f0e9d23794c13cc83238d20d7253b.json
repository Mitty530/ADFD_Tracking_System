{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ousmane\\\\Documents\\\\TrackingSystem\\\\ADFD_Tracking_System\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { getAuthorizedUser, isAuthorizedUser } from '../config/authorizedUsers';\nimport { AuditTrailService } from '../lib/auditTrail';\nimport { DatabaseService } from '../lib/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Development mode: Create a mock user for dashboard testing\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üß™ Development mode: Creating mock user for dashboard testing...');\n      const mockUser = {\n        id: 'dev-user-id',\n        name: 'Mamadou Oury Diallo',\n        email: 'Mamadouourydiallo819@gmail.com',\n        role: 'admin',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n      setUser(mockUser);\n      setLoading(false);\n      return;\n    }\n\n    // Handle magic link authentication on page load\n    const handleAuthCallback = async () => {\n      console.log('üîç Checking for authentication callback...');\n\n      // Check if this is a magic link callback (has auth tokens in URL)\n      const hashParams = new URLSearchParams(window.location.hash.substring(1));\n      const accessToken = hashParams.get('access_token');\n      const refreshToken = hashParams.get('refresh_token');\n      if (accessToken && refreshToken) {\n        console.log('üîó Magic link authentication detected, processing tokens...');\n        try {\n          var _data$session;\n          // Set the session with the tokens from the magic link\n          const {\n            data,\n            error\n          } = await supabase.auth.setSession({\n            access_token: accessToken,\n            refresh_token: refreshToken\n          });\n          if (error) {\n            console.error('‚ùå Error setting session from magic link:', error);\n            setLoading(false);\n            return;\n          }\n          if ((_data$session = data.session) !== null && _data$session !== void 0 && _data$session.user) {\n            console.log('‚úÖ Magic link authentication successful');\n            await fetchUserProfile(data.session.user);\n\n            // Clean up the URL by removing the hash parameters\n            window.history.replaceState({}, document.title, window.location.pathname);\n            return;\n          }\n        } catch (error) {\n          console.error('‚ùå Magic link processing error:', error);\n        }\n      }\n\n      // Get initial session (normal flow)\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      console.log('üîç Getting initial session...', session ? 'Found' : 'Not found');\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    };\n    handleAuthCallback();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('üîÑ Auth state change:', event, session ? 'Session exists' : 'No session');\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        console.log('üë§ User found in session, fetching profile...');\n        await fetchUserProfile(session.user);\n      } else {\n        // Log session end if user was previously logged in\n        if (event === 'SIGNED_OUT') {\n          await AuditTrailService.logSessionEnd('logout');\n        }\n        console.log('‚ùå No user in session, clearing state...');\n        setUser(null);\n        setLoading(false);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const fetchUserProfile = async authUser => {\n    try {\n      var _authUser$user_metada, _authUser$email, _authUser$user_metada2;\n      console.log('üîç Fetching user profile for:', authUser.email);\n\n      // Create a basic profile from auth user data first\n      const basicProfile = {\n        id: authUser.id,\n        name: ((_authUser$user_metada = authUser.user_metadata) === null || _authUser$user_metada === void 0 ? void 0 : _authUser$user_metada.name) || ((_authUser$email = authUser.email) === null || _authUser$email === void 0 ? void 0 : _authUser$email.split('@')[0]) || 'User',\n        email: authUser.email || '',\n        role: ((_authUser$user_metada2 = authUser.user_metadata) === null || _authUser$user_metada2 === void 0 ? void 0 : _authUser$user_metada2.role) || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n      console.log('üìù Created basic profile:', basicProfile);\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to get authorized user profile first\n      const authorizedUser = getAuthorizedUser(authUser.email || '');\n      console.log('üîç Authorized user lookup result:', authorizedUser ? 'Found' : 'Not found');\n      if (authorizedUser) {\n        // Use authorized user profile\n        const userProfile = {\n          id: authUser.id,\n          name: authorizedUser.name,\n          email: authUser.email || '',\n          role: authorizedUser.role,\n          region: undefined,\n          regional_countries: undefined,\n          can_create_requests: authorizedUser.can_create_requests,\n          can_approve_reject: authorizedUser.can_approve_reject,\n          can_disburse: authorizedUser.can_disburse,\n          view_only_access: authorizedUser.view_only_access,\n          is_active: true,\n          avatar_url: undefined\n        };\n\n        // Initialize audit trail for this session\n        const sessionId = `session_${Date.now()}_${authUser.id}`;\n        localStorage.setItem('adfd-session-start', Date.now().toString());\n        localStorage.setItem('adfd-session-id', sessionId);\n        AuditTrailService.initialize(authUser.id, sessionId);\n\n        // Create user session record\n        await DatabaseService.createUserSession({\n          id: sessionId,\n          user_id: authUser.id,\n          session_token: (session === null || session === void 0 ? void 0 : session.access_token) || '',\n          ip_address: undefined,\n          // Will be populated by audit service\n          user_agent: navigator.userAgent,\n          login_at: new Date().toISOString(),\n          is_active: true,\n          remember_me: localStorage.getItem('adfd-remember-me') === 'true'\n        });\n\n        // Log successful login\n        await AuditTrailService.logUserActivity('login', `User ${userProfile.name} logged in successfully`, {\n          user_role: userProfile.role,\n          user_department: authorizedUser.department,\n          login_method: 'magic_link',\n          session_id: sessionId\n        });\n        setUser(userProfile);\n        console.log('‚úÖ Using authorized user profile:', userProfile);\n      } else {\n        // Try to fetch the full profile from database (fallback)\n        try {\n          const {\n            data,\n            error\n          } = await supabase.from('user_profiles').select('*').eq('id', authUser.id).single();\n          if (!error && data) {\n            // Update with database profile if available\n            const userProfile = {\n              id: data.id,\n              name: data.full_name,\n              email: authUser.email || '',\n              role: data.role,\n              region: data.region,\n              regional_countries: data.regional_countries,\n              can_create_requests: data.can_create_requests,\n              can_approve_reject: data.can_approve_reject,\n              can_disburse: data.can_disburse,\n              view_only_access: data.view_only_access,\n              is_active: data.is_active,\n              avatar_url: data.avatar_url\n            };\n            setUser(userProfile);\n          }\n        } catch (dbError) {\n          console.log('Could not fetch database profile, using basic profile:', dbError);\n          // Keep the basic profile - this is not a critical error\n        }\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n  const signInWithMagicLink = async email => {\n    console.log('üîê AuthContext signInWithMagicLink called with:', {\n      email\n    });\n\n    // Check if user is authorized\n    if (!isAuthorizedUser(email)) {\n      // Log unauthorized access attempt\n      await AuditTrailService.logSecurityEvent('unauthorized_access', `Unauthorized login attempt by ${email}`, {\n        user_email: email,\n        attempt_timestamp: new Date().toISOString()\n      });\n      return {\n        error: {\n          message: 'You are not authorized to access this system. Contact admin for assistance.',\n          name: 'AuthorizationError'\n        }\n      };\n    }\n    const {\n      error\n    } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        emailRedirectTo: `${window.location.origin}/dashboard`,\n        shouldCreateUser: false // Don't create new users, only allow existing authorized users\n      }\n    });\n    console.log('üîê Supabase magic link result:', {\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'No error'\n    });\n    return {\n      error\n    };\n  };\n  const signOut = async () => {\n    console.log('üîê AuthContext: Signing out user...');\n    try {\n      // Log session end before signing out\n      if (user) {\n        await AuditTrailService.logSessionEnd('logout');\n\n        // End user session in database\n        const sessionId = localStorage.getItem('adfd-session-id');\n        if (sessionId) {\n          await DatabaseService.endUserSession(sessionId);\n        }\n      }\n\n      // Clear session storage\n      localStorage.removeItem('adfd-session-start');\n      localStorage.removeItem('adfd-session-id');\n      localStorage.removeItem('adfd-remember-me');\n      localStorage.removeItem('adfd-saved-email');\n\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n      console.log('‚úÖ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('‚ùå AuthContext: Error during signOut:', error);\n\n      // Log the error\n      await AuditTrailService.logError('signout_error', 'Failed to sign out properly', error instanceof Error ? error.stack : undefined);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n  const resetPassword = async email => {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email);\n    return {\n      error\n    };\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signInWithMagicLink,\n    signOut,\n    resetPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","getAuthorizedUser","isAuthorizedUser","AuditTrailService","DatabaseService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","process","env","NODE_ENV","console","log","mockUser","id","name","email","role","can_create_requests","can_approve_reject","can_disburse","view_only_access","is_active","handleAuthCallback","hashParams","URLSearchParams","window","location","hash","substring","accessToken","get","refreshToken","_data$session","data","error","auth","access_token","refresh_token","fetchUserProfile","history","replaceState","document","title","pathname","getSession","subscription","onAuthStateChange","event","logSessionEnd","unsubscribe","authUser","_authUser$user_metada","_authUser$email","_authUser$user_metada2","basicProfile","user_metadata","split","region","authorizedUser","userProfile","regional_countries","avatar_url","sessionId","Date","now","localStorage","setItem","toString","initialize","createUserSession","user_id","session_token","ip_address","user_agent","navigator","userAgent","login_at","toISOString","remember_me","getItem","logUserActivity","user_role","user_department","department","login_method","session_id","from","select","eq","single","full_name","dbError","signInWithMagicLink","logSecurityEvent","user_email","attempt_timestamp","message","signInWithOtp","options","emailRedirectTo","origin","shouldCreateUser","signOut","endUserSession","removeItem","logError","stack","resetPassword","resetPasswordForEmail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ousmane/Documents/TrackingSystem/ADFD_Tracking_System/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\nimport { User, Session, AuthError } from '@supabase/supabase-js';\r\nimport { getAuthorizedUser, isAuthorizedUser } from '../config/authorizedUsers';\r\nimport { AuditTrailService } from '../lib/auditTrail';\r\nimport { DatabaseService } from '../lib/database';\r\n\r\ninterface UserProfile {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  region?: string;\r\n  regional_countries?: string[];\r\n  can_create_requests: boolean;\r\n  can_approve_reject: boolean;\r\n  can_disburse: boolean;\r\n  view_only_access: boolean;\r\n  is_active: boolean;\r\n  avatar_url?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: UserProfile | null;\r\n  session: Session | null;\r\n  loading: boolean;\r\n  signInWithMagicLink: (email: string) => Promise<{ error: AuthError | null }>;\r\n  signOut: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<UserProfile | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Development mode: Create a mock user for dashboard testing\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('üß™ Development mode: Creating mock user for dashboard testing...');\r\n      const mockUser: UserProfile = {\r\n        id: 'dev-user-id',\r\n        name: 'Mamadou Oury Diallo',\r\n        email: 'Mamadouourydiallo819@gmail.com',\r\n        role: 'admin',\r\n        can_create_requests: true,\r\n        can_approve_reject: true,\r\n        can_disburse: true,\r\n        view_only_access: false,\r\n        is_active: true\r\n      };\r\n      setUser(mockUser);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // Handle magic link authentication on page load\r\n    const handleAuthCallback = async () => {\r\n      console.log('üîç Checking for authentication callback...');\r\n\r\n      // Check if this is a magic link callback (has auth tokens in URL)\r\n      const hashParams = new URLSearchParams(window.location.hash.substring(1));\r\n      const accessToken = hashParams.get('access_token');\r\n      const refreshToken = hashParams.get('refresh_token');\r\n\r\n      if (accessToken && refreshToken) {\r\n        console.log('üîó Magic link authentication detected, processing tokens...');\r\n\r\n        try {\r\n          // Set the session with the tokens from the magic link\r\n          const { data, error } = await supabase.auth.setSession({\r\n            access_token: accessToken,\r\n            refresh_token: refreshToken\r\n          });\r\n\r\n          if (error) {\r\n            console.error('‚ùå Error setting session from magic link:', error);\r\n            setLoading(false);\r\n            return;\r\n          }\r\n\r\n          if (data.session?.user) {\r\n            console.log('‚úÖ Magic link authentication successful');\r\n            await fetchUserProfile(data.session.user);\r\n\r\n            // Clean up the URL by removing the hash parameters\r\n            window.history.replaceState({}, document.title, window.location.pathname);\r\n            return;\r\n          }\r\n        } catch (error) {\r\n          console.error('‚ùå Magic link processing error:', error);\r\n        }\r\n      }\r\n\r\n      // Get initial session (normal flow)\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      console.log('üîç Getting initial session...', session ? 'Found' : 'Not found');\r\n      setSession(session);\r\n      if (session?.user) {\r\n        await fetchUserProfile(session.user);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    handleAuthCallback();\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      console.log('üîÑ Auth state change:', event, session ? 'Session exists' : 'No session');\r\n      setSession(session);\r\n      if (session?.user) {\r\n        console.log('üë§ User found in session, fetching profile...');\r\n        await fetchUserProfile(session.user);\r\n      } else {\r\n        // Log session end if user was previously logged in\r\n        if (event === 'SIGNED_OUT') {\r\n          await AuditTrailService.logSessionEnd('logout');\r\n        }\r\n        console.log('‚ùå No user in session, clearing state...');\r\n        setUser(null);\r\n        setLoading(false);\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const fetchUserProfile = async (authUser: User) => {\r\n    try {\r\n      console.log('üîç Fetching user profile for:', authUser.email);\r\n\r\n      // Create a basic profile from auth user data first\r\n      const basicProfile: UserProfile = {\r\n        id: authUser.id,\r\n        name: authUser.user_metadata?.name || authUser.email?.split('@')[0] || 'User',\r\n        email: authUser.email || '',\r\n        role: authUser.user_metadata?.role || 'admin',\r\n        region: 'global',\r\n        can_create_requests: true,\r\n        can_approve_reject: true,\r\n        can_disburse: true,\r\n        view_only_access: false,\r\n        is_active: true\r\n      };\r\n\r\n      console.log('üìù Created basic profile:', basicProfile);\r\n\r\n      // Set the basic profile immediately to allow login\r\n      setUser(basicProfile);\r\n      setLoading(false);\r\n\r\n      // Try to get authorized user profile first\r\n      const authorizedUser = getAuthorizedUser(authUser.email || '');\r\n      console.log('üîç Authorized user lookup result:', authorizedUser ? 'Found' : 'Not found');\r\n\r\n      if (authorizedUser) {\r\n        // Use authorized user profile\r\n        const userProfile: UserProfile = {\r\n          id: authUser.id,\r\n          name: authorizedUser.name,\r\n          email: authUser.email || '',\r\n          role: authorizedUser.role,\r\n          region: undefined,\r\n          regional_countries: undefined,\r\n          can_create_requests: authorizedUser.can_create_requests,\r\n          can_approve_reject: authorizedUser.can_approve_reject,\r\n          can_disburse: authorizedUser.can_disburse,\r\n          view_only_access: authorizedUser.view_only_access,\r\n          is_active: true,\r\n          avatar_url: undefined\r\n        };\r\n\r\n        // Initialize audit trail for this session\r\n        const sessionId = `session_${Date.now()}_${authUser.id}`;\r\n        localStorage.setItem('adfd-session-start', Date.now().toString());\r\n        localStorage.setItem('adfd-session-id', sessionId);\r\n\r\n        AuditTrailService.initialize(authUser.id, sessionId);\r\n\r\n        // Create user session record\r\n        await DatabaseService.createUserSession({\r\n          id: sessionId,\r\n          user_id: authUser.id,\r\n          session_token: session?.access_token || '',\r\n          ip_address: undefined, // Will be populated by audit service\r\n          user_agent: navigator.userAgent,\r\n          login_at: new Date().toISOString(),\r\n          is_active: true,\r\n          remember_me: localStorage.getItem('adfd-remember-me') === 'true'\r\n        });\r\n\r\n        // Log successful login\r\n        await AuditTrailService.logUserActivity('login', `User ${userProfile.name} logged in successfully`, {\r\n          user_role: userProfile.role,\r\n          user_department: authorizedUser.department,\r\n          login_method: 'magic_link',\r\n          session_id: sessionId\r\n        });\r\n\r\n        setUser(userProfile);\r\n        console.log('‚úÖ Using authorized user profile:', userProfile);\r\n      } else {\r\n        // Try to fetch the full profile from database (fallback)\r\n        try {\r\n          const { data, error } = await supabase\r\n            .from('user_profiles')\r\n            .select('*')\r\n            .eq('id', authUser.id)\r\n            .single();\r\n\r\n          if (!error && data) {\r\n            // Update with database profile if available\r\n            const userProfile: UserProfile = {\r\n              id: data.id,\r\n              name: data.full_name,\r\n              email: authUser.email || '',\r\n              role: data.role,\r\n              region: data.region,\r\n              regional_countries: data.regional_countries,\r\n              can_create_requests: data.can_create_requests,\r\n              can_approve_reject: data.can_approve_reject,\r\n              can_disburse: data.can_disburse,\r\n              view_only_access: data.view_only_access,\r\n              is_active: data.is_active,\r\n              avatar_url: data.avatar_url\r\n            };\r\n            setUser(userProfile);\r\n          }\r\n        } catch (dbError) {\r\n          console.log('Could not fetch database profile, using basic profile:', dbError);\r\n          // Keep the basic profile - this is not a critical error\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in fetchUserProfile:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signInWithMagicLink = async (email: string) => {\r\n    console.log('üîê AuthContext signInWithMagicLink called with:', { email });\r\n\r\n    // Check if user is authorized\r\n    if (!isAuthorizedUser(email)) {\r\n      // Log unauthorized access attempt\r\n      await AuditTrailService.logSecurityEvent(\r\n        'unauthorized_access',\r\n        `Unauthorized login attempt by ${email}`,\r\n        {\r\n          user_email: email,\r\n          attempt_timestamp: new Date().toISOString()\r\n        }\r\n      );\r\n\r\n      return {\r\n        error: {\r\n          message: 'You are not authorized to access this system. Contact admin for assistance.',\r\n          name: 'AuthorizationError'\r\n        } as AuthError\r\n      };\r\n    }\r\n\r\n    const { error } = await supabase.auth.signInWithOtp({\r\n      email,\r\n      options: {\r\n        emailRedirectTo: `${window.location.origin}/dashboard`,\r\n        shouldCreateUser: false, // Don't create new users, only allow existing authorized users\r\n      }\r\n    });\r\n\r\n    console.log('üîê Supabase magic link result:', { error: error?.message || 'No error' });\r\n    return { error };\r\n  };\r\n\r\n\r\n\r\n  const signOut = async () => {\r\n    console.log('üîê AuthContext: Signing out user...');\r\n\r\n    try {\r\n      // Log session end before signing out\r\n      if (user) {\r\n        await AuditTrailService.logSessionEnd('logout');\r\n\r\n        // End user session in database\r\n        const sessionId = localStorage.getItem('adfd-session-id');\r\n        if (sessionId) {\r\n          await DatabaseService.endUserSession(sessionId);\r\n        }\r\n      }\r\n\r\n      // Clear session storage\r\n      localStorage.removeItem('adfd-session-start');\r\n      localStorage.removeItem('adfd-session-id');\r\n      localStorage.removeItem('adfd-remember-me');\r\n      localStorage.removeItem('adfd-saved-email');\r\n\r\n      // Sign out from Supabase\r\n      await supabase.auth.signOut();\r\n\r\n      // Clear local state\r\n      setUser(null);\r\n      setSession(null);\r\n\r\n      console.log('‚úÖ AuthContext: User signed out successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå AuthContext: Error during signOut:', error);\r\n\r\n      // Log the error\r\n      await AuditTrailService.logError('signout_error', 'Failed to sign out properly', error instanceof Error ? error.stack : undefined);\r\n\r\n      // Even if Supabase signOut fails, clear local state\r\n      setUser(null);\r\n      setSession(null);\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (email: string) => {\r\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\r\n    return { error };\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    loading,\r\n    signInWithMagicLink,\r\n    signOut,\r\n    resetPassword\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}