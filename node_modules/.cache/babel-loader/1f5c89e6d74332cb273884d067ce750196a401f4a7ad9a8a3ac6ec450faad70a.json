{"ast":null,"code":"import { AUTHORIZED_USERS } from '../config/authorizedUsers';\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  COMMENTS: 'adfd_request_comments',\n  MENTIONS: 'adfd_user_mentions'\n};\nclass CommentService {\n  // Initialize with mock data if no data exists\n  initializeData() {\n    if (!localStorage.getItem(STORAGE_KEYS.COMMENTS)) {\n      const mockComments = [{\n        id: 'comment_1',\n        requestId: '1',\n        userId: 'ops001',\n        userName: 'Ali Al Derie',\n        userAvatar: 'üë®‚Äçüîß',\n        commentText: 'Request has been reviewed and approved for technical assessment.',\n        mentionedUsers: [],\n        isInternal: false,\n        createdAt: new Date('2025-05-07T10:30:00Z'),\n        updatedAt: new Date('2025-05-07T10:30:00Z')\n      }, {\n        id: 'comment_2',\n        requestId: '2',\n        userId: 'archive001',\n        userName: 'Ahmed Al Zaabi',\n        userAvatar: 'üë®‚Äçüíº',\n        commentText: 'Withdrawal date has expired. @bank001 please review extension requirements.',\n        mentionedUsers: ['bank001'],\n        isInternal: false,\n        createdAt: new Date('2025-05-08T14:30:00Z'),\n        updatedAt: new Date('2025-05-08T14:30:00Z')\n      }, {\n        id: 'comment_3',\n        requestId: '2',\n        userId: 'bank001',\n        userName: 'Ahmed Siddique',\n        userAvatar: 'üë©‚Äçüíª',\n        commentText: 'Extension request documentation sent to beneficiary. Awaiting response.',\n        mentionedUsers: [],\n        isInternal: false,\n        createdAt: new Date('2025-05-08T16:20:00Z'),\n        updatedAt: new Date('2025-05-08T16:20:00Z')\n      }, {\n        id: 'comment_4',\n        requestId: '3',\n        userId: 'ops001',\n        userName: 'Ali Al Derie',\n        userAvatar: 'üë®‚Äçüîß',\n        commentText: 'Technical review in progress. Checking project eligibility requirements.',\n        mentionedUsers: [],\n        isInternal: true,\n        createdAt: new Date('2025-05-12T10:15:00Z'),\n        updatedAt: new Date('2025-05-12T10:15:00Z')\n      }];\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(mockComments));\n    }\n  }\n\n  // Get all comments for a specific request\n  getCommentsByRequestId(requestId) {\n    this.initializeData();\n    const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n    const allComments = comments ? JSON.parse(comments) : [];\n    return allComments.filter(comment => comment.requestId === requestId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  // Add a new comment\n  addComment(requestId, userId, commentData) {\n    try {\n      this.initializeData();\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments = comments ? JSON.parse(comments) : [];\n\n      // Find user details\n      const user = AUTHORIZED_USERS.find(u => u.email === userId);\n      if (!user) {\n        console.error('User not found:', userId);\n        return null;\n      }\n      const newComment = {\n        id: `comment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        requestId,\n        userId,\n        userName: user.name,\n        userAvatar: this.getUserAvatar(user.role),\n        commentText: commentData.commentText,\n        mentionedUsers: commentData.mentionedUsers,\n        isInternal: commentData.isInternal,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      allComments.push(newComment);\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(allComments));\n      return newComment;\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      return null;\n    }\n  }\n\n  // Update an existing comment\n  updateComment(commentId, updates) {\n    try {\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments = comments ? JSON.parse(comments) : [];\n      const commentIndex = allComments.findIndex(comment => comment.id === commentId);\n      if (commentIndex === -1) return false;\n      allComments[commentIndex] = {\n        ...allComments[commentIndex],\n        ...updates,\n        updatedAt: new Date()\n      };\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(allComments));\n      return true;\n    } catch (error) {\n      console.error('Error updating comment:', error);\n      return false;\n    }\n  }\n\n  // Delete a comment\n  deleteComment(commentId) {\n    try {\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments = comments ? JSON.parse(comments) : [];\n      const filteredComments = allComments.filter(comment => comment.id !== commentId);\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(filteredComments));\n      return true;\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      return false;\n    }\n  }\n\n  // Get available users for mentions\n  getAvailableUsersForMentions() {\n    return AUTHORIZED_USERS.filter(user => user.email !== 'Mamadouourydiallo819@gmail.com') // Exclude current user in production\n    .map(user => ({\n      id: user.email,\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      avatar: this.getUserAvatar(user.role),\n      isActive: true\n    }));\n  }\n\n  // Parse mentions from comment text\n  parseMentions(commentText) {\n    const mentionRegex = /@(\\w+)/g;\n    const mentions = [];\n    let match;\n    while ((match = mentionRegex.exec(commentText)) !== null) {\n      const username = match[1];\n      // Find user by name or email\n      const user = AUTHORIZED_USERS.find(u => u.name.toLowerCase().includes(username.toLowerCase()) || u.email.toLowerCase().includes(username.toLowerCase()));\n      if (user && !mentions.includes(user.email)) {\n        mentions.push(user.email);\n      }\n    }\n    return mentions;\n  }\n\n  // Get user avatar based on role\n  getUserAvatar(role) {\n    const avatarMap = {\n      'archive_team': 'üë®‚Äçüíº',\n      'operations_team': 'üë®‚Äçüîß',\n      'core_banking': 'üë©‚Äçüíª',\n      'loan_administrator': 'üë®‚Äçüíº',\n      'observer': 'üëÄ',\n      'admin': 'üëë'\n    };\n    return avatarMap[role] || 'üë§';\n  }\n\n  // Get comment count for a request\n  getCommentCount(requestId) {\n    return this.getCommentsByRequestId(requestId).length;\n  }\n\n  // Search comments by text\n  searchComments(requestId, searchTerm) {\n    const comments = this.getCommentsByRequestId(requestId);\n    const lowercaseSearch = searchTerm.toLowerCase();\n    return comments.filter(comment => comment.commentText.toLowerCase().includes(lowercaseSearch) || comment.userName.toLowerCase().includes(lowercaseSearch));\n  }\n}\nexport const commentService = new CommentService();","map":{"version":3,"names":["AUTHORIZED_USERS","STORAGE_KEYS","COMMENTS","MENTIONS","CommentService","initializeData","localStorage","getItem","mockComments","id","requestId","userId","userName","userAvatar","commentText","mentionedUsers","isInternal","createdAt","Date","updatedAt","setItem","JSON","stringify","getCommentsByRequestId","comments","allComments","parse","filter","comment","sort","a","b","getTime","addComment","commentData","user","find","u","email","console","error","newComment","now","Math","random","toString","substr","name","getUserAvatar","role","push","updateComment","commentId","updates","commentIndex","findIndex","deleteComment","filteredComments","getAvailableUsersForMentions","map","avatar","isActive","parseMentions","mentionRegex","mentions","match","exec","username","toLowerCase","includes","avatarMap","getCommentCount","length","searchComments","searchTerm","lowercaseSearch","commentService"],"sources":["/Users/mamadouourydiallo/ADFI/src/services/commentService.ts"],"sourcesContent":["import { RequestComment, CommentFormData, UserMention } from '../types/withdrawalTypes';\nimport { AUTHORIZED_USERS } from '../config/authorizedUsers';\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  COMMENTS: 'adfd_request_comments',\n  MENTIONS: 'adfd_user_mentions'\n};\n\nclass CommentService {\n  // Initialize with mock data if no data exists\n  private initializeData(): void {\n    if (!localStorage.getItem(STORAGE_KEYS.COMMENTS)) {\n      const mockComments: RequestComment[] = [\n        {\n          id: 'comment_1',\n          requestId: '1',\n          userId: 'ops001',\n          userName: 'Ali Al Derie',\n          userAvatar: 'üë®‚Äçüîß',\n          commentText: 'Request has been reviewed and approved for technical assessment.',\n          mentionedUsers: [],\n          isInternal: false,\n          createdAt: new Date('2025-05-07T10:30:00Z'),\n          updatedAt: new Date('2025-05-07T10:30:00Z')\n        },\n        {\n          id: 'comment_2',\n          requestId: '2',\n          userId: 'archive001',\n          userName: 'Ahmed Al Zaabi',\n          userAvatar: 'üë®‚Äçüíº',\n          commentText: 'Withdrawal date has expired. @bank001 please review extension requirements.',\n          mentionedUsers: ['bank001'],\n          isInternal: false,\n          createdAt: new Date('2025-05-08T14:30:00Z'),\n          updatedAt: new Date('2025-05-08T14:30:00Z')\n        },\n        {\n          id: 'comment_3',\n          requestId: '2',\n          userId: 'bank001',\n          userName: 'Ahmed Siddique',\n          userAvatar: 'üë©‚Äçüíª',\n          commentText: 'Extension request documentation sent to beneficiary. Awaiting response.',\n          mentionedUsers: [],\n          isInternal: false,\n          createdAt: new Date('2025-05-08T16:20:00Z'),\n          updatedAt: new Date('2025-05-08T16:20:00Z')\n        },\n        {\n          id: 'comment_4',\n          requestId: '3',\n          userId: 'ops001',\n          userName: 'Ali Al Derie',\n          userAvatar: 'üë®‚Äçüîß',\n          commentText: 'Technical review in progress. Checking project eligibility requirements.',\n          mentionedUsers: [],\n          isInternal: true,\n          createdAt: new Date('2025-05-12T10:15:00Z'),\n          updatedAt: new Date('2025-05-12T10:15:00Z')\n        }\n      ];\n      \n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(mockComments));\n    }\n  }\n\n  // Get all comments for a specific request\n  getCommentsByRequestId(requestId: string): RequestComment[] {\n    this.initializeData();\n    const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n    const allComments: RequestComment[] = comments ? JSON.parse(comments) : [];\n    \n    return allComments\n      .filter(comment => comment.requestId === requestId)\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  // Add a new comment\n  addComment(requestId: string, userId: string, commentData: CommentFormData): RequestComment | null {\n    try {\n      this.initializeData();\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments: RequestComment[] = comments ? JSON.parse(comments) : [];\n      \n      // Find user details\n      const user = AUTHORIZED_USERS.find(u => u.email === userId);\n      if (!user) {\n        console.error('User not found:', userId);\n        return null;\n      }\n\n      const newComment: RequestComment = {\n        id: `comment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        requestId,\n        userId,\n        userName: user.name,\n        userAvatar: this.getUserAvatar(user.role),\n        commentText: commentData.commentText,\n        mentionedUsers: commentData.mentionedUsers,\n        isInternal: commentData.isInternal,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      allComments.push(newComment);\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(allComments));\n      \n      return newComment;\n    } catch (error) {\n      console.error('Error adding comment:', error);\n      return null;\n    }\n  }\n\n  // Update an existing comment\n  updateComment(commentId: string, updates: Partial<CommentFormData>): boolean {\n    try {\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments: RequestComment[] = comments ? JSON.parse(comments) : [];\n      \n      const commentIndex = allComments.findIndex(comment => comment.id === commentId);\n      if (commentIndex === -1) return false;\n\n      allComments[commentIndex] = {\n        ...allComments[commentIndex],\n        ...updates,\n        updatedAt: new Date()\n      };\n\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(allComments));\n      return true;\n    } catch (error) {\n      console.error('Error updating comment:', error);\n      return false;\n    }\n  }\n\n  // Delete a comment\n  deleteComment(commentId: string): boolean {\n    try {\n      const comments = localStorage.getItem(STORAGE_KEYS.COMMENTS);\n      const allComments: RequestComment[] = comments ? JSON.parse(comments) : [];\n      \n      const filteredComments = allComments.filter(comment => comment.id !== commentId);\n      localStorage.setItem(STORAGE_KEYS.COMMENTS, JSON.stringify(filteredComments));\n      \n      return true;\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      return false;\n    }\n  }\n\n  // Get available users for mentions\n  getAvailableUsersForMentions(): UserMention[] {\n    return AUTHORIZED_USERS\n      .filter(user => user.email !== 'Mamadouourydiallo819@gmail.com') // Exclude current user in production\n      .map(user => ({\n        id: user.email,\n        name: user.name,\n        email: user.email,\n        role: user.role as any,\n        avatar: this.getUserAvatar(user.role),\n        isActive: true\n      }));\n  }\n\n  // Parse mentions from comment text\n  parseMentions(commentText: string): string[] {\n    const mentionRegex = /@(\\w+)/g;\n    const mentions: string[] = [];\n    let match;\n\n    while ((match = mentionRegex.exec(commentText)) !== null) {\n      const username = match[1];\n      // Find user by name or email\n      const user = AUTHORIZED_USERS.find(u => \n        u.name.toLowerCase().includes(username.toLowerCase()) ||\n        u.email.toLowerCase().includes(username.toLowerCase())\n      );\n      \n      if (user && !mentions.includes(user.email)) {\n        mentions.push(user.email);\n      }\n    }\n\n    return mentions;\n  }\n\n  // Get user avatar based on role\n  private getUserAvatar(role: string): string {\n    const avatarMap: Record<string, string> = {\n      'archive_team': 'üë®‚Äçüíº',\n      'operations_team': 'üë®‚Äçüîß',\n      'core_banking': 'üë©‚Äçüíª',\n      'loan_administrator': 'üë®‚Äçüíº',\n      'observer': 'üëÄ',\n      'admin': 'üëë'\n    };\n    \n    return avatarMap[role] || 'üë§';\n  }\n\n  // Get comment count for a request\n  getCommentCount(requestId: string): number {\n    return this.getCommentsByRequestId(requestId).length;\n  }\n\n  // Search comments by text\n  searchComments(requestId: string, searchTerm: string): RequestComment[] {\n    const comments = this.getCommentsByRequestId(requestId);\n    const lowercaseSearch = searchTerm.toLowerCase();\n    \n    return comments.filter(comment =>\n      comment.commentText.toLowerCase().includes(lowercaseSearch) ||\n      comment.userName.toLowerCase().includes(lowercaseSearch)\n    );\n  }\n}\n\nexport const commentService = new CommentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}