{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nexport const usePerformance = () => {\n  _s();\n  const measurePerformance = useCallback(() => {\n    if (typeof window === 'undefined' || !window.performance) {\n      return null;\n    }\n    const navigation = performance.getEntriesByType('navigation')[0];\n    const paint = performance.getEntriesByType('paint');\n    const metrics = {\n      loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart\n    };\n\n    // Add paint metrics if available\n    paint.forEach(entry => {\n      if (entry.name === 'first-contentful-paint') {\n        metrics.firstContentfulPaint = entry.startTime;\n      }\n    });\n\n    // Get LCP if available\n    if ('PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver(list => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1];\n          metrics.largestContentfulPaint = lastEntry.startTime;\n        });\n        observer.observe({\n          entryTypes: ['largest-contentful-paint']\n        });\n      } catch (e) {\n        console.warn('LCP measurement not supported');\n      }\n    }\n    return metrics;\n  }, []);\n  const logPerformanceMetrics = useCallback(() => {\n    const metrics = measurePerformance();\n    if (metrics) {\n      console.group('ðŸš€ Performance Metrics');\n      console.log('Load Time:', `${metrics.loadTime.toFixed(2)}ms`);\n      console.log('DOM Content Loaded:', `${metrics.domContentLoaded.toFixed(2)}ms`);\n      if (metrics.firstContentfulPaint) {\n        console.log('First Contentful Paint:', `${metrics.firstContentfulPaint.toFixed(2)}ms`);\n      }\n      if (metrics.largestContentfulPaint) {\n        console.log('Largest Contentful Paint:', `${metrics.largestContentfulPaint.toFixed(2)}ms`);\n      }\n      console.groupEnd();\n    }\n  }, [measurePerformance]);\n  useEffect(() => {\n    // Log performance metrics after page load\n    const timer = setTimeout(() => {\n      logPerformanceMetrics();\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [logPerformanceMetrics]);\n  return {\n    measurePerformance,\n    logPerformanceMetrics\n  };\n};\n\n// Utility function to preload critical resources\n_s(usePerformance, \"8uIsb4i8kpgn4AtG2I4Tyk5kMAo=\");\nexport const preloadResource = (href, as, type) => {\n  if (typeof document === 'undefined') return;\n  const link = document.createElement('link');\n  link.rel = 'preload';\n  link.href = href;\n  link.as = as;\n  if (type) link.type = type;\n  document.head.appendChild(link);\n};\n\n// Utility function to prefetch resources\nexport const prefetchResource = href => {\n  if (typeof document === 'undefined') return;\n  const link = document.createElement('link');\n  link.rel = 'prefetch';\n  link.href = href;\n  document.head.appendChild(link);\n};","map":{"version":3,"names":["useEffect","useCallback","usePerformance","_s","measurePerformance","window","performance","navigation","getEntriesByType","paint","metrics","loadTime","loadEventEnd","loadEventStart","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","forEach","entry","name","firstContentfulPaint","startTime","observer","PerformanceObserver","list","entries","getEntries","lastEntry","length","largestContentfulPaint","observe","entryTypes","e","console","warn","logPerformanceMetrics","group","log","toFixed","groupEnd","timer","setTimeout","clearTimeout","preloadResource","href","as","type","document","link","createElement","rel","head","appendChild","prefetchResource"],"sources":["/Users/mamadouourydiallo/ADFI/src/hooks/usePerformance.ts"],"sourcesContent":["import { useEffect, useCallback } from 'react';\n\ninterface PerformanceMetrics {\n  loadTime: number;\n  domContentLoaded: number;\n  firstContentfulPaint?: number;\n  largestContentfulPaint?: number;\n}\n\nexport const usePerformance = () => {\n  const measurePerformance = useCallback((): PerformanceMetrics | null => {\n    if (typeof window === 'undefined' || !window.performance) {\n      return null;\n    }\n\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    const paint = performance.getEntriesByType('paint');\n\n    const metrics: PerformanceMetrics = {\n      loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n    };\n\n    // Add paint metrics if available\n    paint.forEach((entry) => {\n      if (entry.name === 'first-contentful-paint') {\n        metrics.firstContentfulPaint = entry.startTime;\n      }\n    });\n\n    // Get LCP if available\n    if ('PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1];\n          metrics.largestContentfulPaint = lastEntry.startTime;\n        });\n        observer.observe({ entryTypes: ['largest-contentful-paint'] });\n      } catch (e) {\n        console.warn('LCP measurement not supported');\n      }\n    }\n\n    return metrics;\n  }, []);\n\n  const logPerformanceMetrics = useCallback(() => {\n    const metrics = measurePerformance();\n    if (metrics) {\n      console.group('ðŸš€ Performance Metrics');\n      console.log('Load Time:', `${metrics.loadTime.toFixed(2)}ms`);\n      console.log('DOM Content Loaded:', `${metrics.domContentLoaded.toFixed(2)}ms`);\n      if (metrics.firstContentfulPaint) {\n        console.log('First Contentful Paint:', `${metrics.firstContentfulPaint.toFixed(2)}ms`);\n      }\n      if (metrics.largestContentfulPaint) {\n        console.log('Largest Contentful Paint:', `${metrics.largestContentfulPaint.toFixed(2)}ms`);\n      }\n      console.groupEnd();\n    }\n  }, [measurePerformance]);\n\n  useEffect(() => {\n    // Log performance metrics after page load\n    const timer = setTimeout(() => {\n      logPerformanceMetrics();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [logPerformanceMetrics]);\n\n  return {\n    measurePerformance,\n    logPerformanceMetrics\n  };\n};\n\n// Utility function to preload critical resources\nexport const preloadResource = (href: string, as: string, type?: string) => {\n  if (typeof document === 'undefined') return;\n\n  const link = document.createElement('link');\n  link.rel = 'preload';\n  link.href = href;\n  link.as = as;\n  if (type) link.type = type;\n  \n  document.head.appendChild(link);\n};\n\n// Utility function to prefetch resources\nexport const prefetchResource = (href: string) => {\n  if (typeof document === 'undefined') return;\n\n  const link = document.createElement('link');\n  link.rel = 'prefetch';\n  link.href = href;\n  \n  document.head.appendChild(link);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}