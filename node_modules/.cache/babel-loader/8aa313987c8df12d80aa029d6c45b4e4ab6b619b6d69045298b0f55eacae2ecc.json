{"ast":null,"code":"var _jsxFileName = \"/Users/mamadouourydiallo/ADFI/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        setUser(null);\n        setLoading(false);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const fetchUserProfile = async authUser => {\n    try {\n      var _authUser$user_metada, _authUser$email, _authUser$user_metada2;\n      // Create a basic profile from auth user data first\n      const basicProfile = {\n        id: authUser.id,\n        name: ((_authUser$user_metada = authUser.user_metadata) === null || _authUser$user_metada === void 0 ? void 0 : _authUser$user_metada.name) || ((_authUser$email = authUser.email) === null || _authUser$email === void 0 ? void 0 : _authUser$email.split('@')[0]) || 'User',\n        email: authUser.email || '',\n        role: ((_authUser$user_metada2 = authUser.user_metadata) === null || _authUser$user_metada2 === void 0 ? void 0 : _authUser$user_metada2.role) || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to fetch the full profile from database (optional)\n      try {\n        const {\n          data,\n          error\n        } = await supabase.from('user_profiles').select('*').eq('id', authUser.id).single();\n        if (!error && data) {\n          // Update with database profile if available\n          const userProfile = {\n            id: data.id,\n            name: data.full_name,\n            email: authUser.email || '',\n            role: data.role,\n            region: data.region,\n            regional_countries: data.regional_countries,\n            can_create_requests: data.can_create_requests,\n            can_approve_reject: data.can_approve_reject,\n            can_disburse: data.can_disburse,\n            view_only_access: data.view_only_access,\n            is_active: data.is_active,\n            avatar_url: data.avatar_url\n          };\n          setUser(userProfile);\n        }\n      } catch (dbError) {\n        console.log('Could not fetch database profile, using basic profile:', dbError);\n        // Keep the basic profile - this is not a critical error\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n  const signIn = async (email, password) => {\n    console.log('🔐 AuthContext signIn called with:', {\n      email,\n      passwordLength: password.length\n    });\n    const {\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    console.log('🔐 Supabase signIn result:', {\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'No error'\n    });\n    return {\n      error\n    };\n  };\n  const signUp = async (email, password, metadata) => {\n    const {\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    return {\n      error\n    };\n  };\n  const signOut = async () => {\n    console.log('🔐 AuthContext: Signing out user...');\n    try {\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n      console.log('✅ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('❌ AuthContext: Error during signOut:', error);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n  const resetPassword = async email => {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email);\n    return {\n      error\n    };\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","data","fetchUserProfile","subscription","onAuthStateChange","event","unsubscribe","authUser","_authUser$user_metada","_authUser$email","_authUser$user_metada2","basicProfile","id","name","user_metadata","email","split","role","region","can_create_requests","can_approve_reject","can_disburse","view_only_access","is_active","error","from","select","eq","single","userProfile","full_name","regional_countries","avatar_url","dbError","console","log","signIn","password","passwordLength","length","signInWithPassword","message","signUp","metadata","options","signOut","resetPassword","resetPasswordForEmail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mamadouourydiallo/ADFI/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { User, Session, AuthError } from '@supabase/supabase-js';\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  region?: string;\n  regional_countries?: string[];\n  can_create_requests: boolean;\n  can_approve_reject: boolean;\n  can_disburse: boolean;\n  view_only_access: boolean;\n  is_active: boolean;\n  avatar_url?: string;\n}\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>;\n  signUp: (email: string, password: string, metadata: any) => Promise<{ error: AuthError | null }>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session?.user) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      if (session?.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        setUser(null);\n        setLoading(false);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const fetchUserProfile = async (authUser: User) => {\n    try {\n      // Create a basic profile from auth user data first\n      const basicProfile: UserProfile = {\n        id: authUser.id,\n        name: authUser.user_metadata?.name || authUser.email?.split('@')[0] || 'User',\n        email: authUser.email || '',\n        role: authUser.user_metadata?.role || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to fetch the full profile from database (optional)\n      try {\n        const { data, error } = await supabase\n          .from('user_profiles')\n          .select('*')\n          .eq('id', authUser.id)\n          .single();\n\n        if (!error && data) {\n          // Update with database profile if available\n          const userProfile: UserProfile = {\n            id: data.id,\n            name: data.full_name,\n            email: authUser.email || '',\n            role: data.role,\n            region: data.region,\n            regional_countries: data.regional_countries,\n            can_create_requests: data.can_create_requests,\n            can_approve_reject: data.can_approve_reject,\n            can_disburse: data.can_disburse,\n            view_only_access: data.view_only_access,\n            is_active: data.is_active,\n            avatar_url: data.avatar_url\n          };\n          setUser(userProfile);\n        }\n      } catch (dbError) {\n        console.log('Could not fetch database profile, using basic profile:', dbError);\n        // Keep the basic profile - this is not a critical error\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    console.log('🔐 AuthContext signIn called with:', { email, passwordLength: password.length });\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\n    console.log('🔐 Supabase signIn result:', { error: error?.message || 'No error' });\n    return { error };\n  };\n\n  const signUp = async (email: string, password: string, metadata: any) => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    return { error };\n  };\n\n  const signOut = async () => {\n    console.log('🔐 AuthContext: Signing out user...');\n\n    try {\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n\n      console.log('✅ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('❌ AuthContext: Error during signOut:', error);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    return { error };\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}