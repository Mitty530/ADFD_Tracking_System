{"ast":null,"code":"class NotificationService {\n  constructor() {\n    this.notifications = [];\n    this.listeners = [];\n  }\n  // Add a new notification\n  addNotification(notification) {\n    var _notification$autoClo, _notification$duratio;\n    const newNotification = {\n      ...notification,\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n      timestamp: new Date(),\n      autoClose: (_notification$autoClo = notification.autoClose) !== null && _notification$autoClo !== void 0 ? _notification$autoClo : true,\n      duration: (_notification$duratio = notification.duration) !== null && _notification$duratio !== void 0 ? _notification$duratio : 5000\n    };\n    this.notifications.push(newNotification);\n    this.notifyListeners();\n\n    // Auto-remove notification if autoClose is enabled\n    if (newNotification.autoClose) {\n      setTimeout(() => {\n        this.removeNotification(newNotification.id);\n      }, newNotification.duration);\n    }\n    return newNotification.id;\n  }\n\n  // Remove a notification\n  removeNotification(id) {\n    this.notifications = this.notifications.filter(notification => notification.id !== id);\n    this.notifyListeners();\n  }\n\n  // Clear all notifications\n  clearAll() {\n    this.notifications = [];\n    this.notifyListeners();\n  }\n\n  // Get all notifications\n  getNotifications() {\n    return [...this.notifications];\n  }\n\n  // Subscribe to notification changes\n  subscribe(listener) {\n    this.listeners.push(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  // Notify all listeners\n  notifyListeners() {\n    this.listeners.forEach(listener => listener([...this.notifications]));\n  }\n\n  // Convenience methods for different notification types\n  success(title, message, options) {\n    return this.addNotification({\n      type: 'success',\n      title,\n      message,\n      ...options\n    });\n  }\n  error(title, message, options) {\n    return this.addNotification({\n      type: 'error',\n      title,\n      message,\n      autoClose: false,\n      // Errors should be manually dismissed\n      ...options\n    });\n  }\n  warning(title, message, options) {\n    return this.addNotification({\n      type: 'warning',\n      title,\n      message,\n      ...options\n    });\n  }\n  info(title, message, options) {\n    return this.addNotification({\n      type: 'info',\n      title,\n      message,\n      ...options\n    });\n  }\n\n  // Predefined notifications for common actions\n  requestCreated(refNumber) {\n    return this.success('Request Created', `Withdrawal request ${refNumber} has been created successfully.`);\n  }\n  requestApproved(refNumber) {\n    return this.success('Request Approved', `Withdrawal request ${refNumber} has been approved and moved to Core Banking.`);\n  }\n  requestRejected(refNumber) {\n    return this.warning('Request Rejected', `Withdrawal request ${refNumber} has been rejected and returned to Initial Review.`);\n  }\n  requestDisbursed(refNumber) {\n    return this.success('Request Disbursed', `Withdrawal request ${refNumber} has been successfully disbursed.`);\n  }\n  loginSuccess(userName) {\n    return this.success('Login Successful', `Welcome back, ${userName}! You are now logged in.`);\n  }\n  loginError(reason) {\n    return this.error('Login Failed', reason);\n  }\n  permissionDenied(action, userRole, requiredRole) {\n    const title = 'ðŸš« Access Denied';\n    const message = userRole && requiredRole ? `Your role (${userRole.replace('_', ' ')}) cannot ${action}. Only ${requiredRole.replace('_', ' ')} members can perform this action.` : `You do not have permission to ${action}. Please contact your administrator.`;\n    return this.error(title, message, {\n      duration: 8000,\n      // Longer duration for permission errors\n      autoClose: false // Require manual dismissal\n    });\n  }\n  validationError(errors) {\n    return this.error('Validation Error', `Please fix the following errors: ${errors.join(', ')}`);\n  }\n  networkError() {\n    return this.error('Network Error', 'Unable to connect to the server. Please check your internet connection and try again.');\n  }\n  unexpectedError() {\n    return this.error('Unexpected Error', 'An unexpected error occurred. Please try again or contact support if the problem persists.');\n  }\n}\nexport const notificationService = new NotificationService();","map":{"version":3,"names":["NotificationService","constructor","notifications","listeners","addNotification","notification","_notification$autoClo","_notification$duratio","newNotification","id","Date","now","toString","Math","random","substr","timestamp","autoClose","duration","push","notifyListeners","setTimeout","removeNotification","filter","clearAll","getNotifications","subscribe","listener","l","forEach","success","title","message","options","type","error","warning","info","requestCreated","refNumber","requestApproved","requestRejected","requestDisbursed","loginSuccess","userName","loginError","reason","permissionDenied","action","userRole","requiredRole","replace","validationError","errors","join","networkError","unexpectedError","notificationService"],"sources":["C:/Users/Ousmane/Documents/TrackingSystem/ADFD_Tracking_System/src/services/notificationService.ts"],"sourcesContent":["import { Notification } from '../types/withdrawalTypes';\r\n\r\nclass NotificationService {\r\n  private notifications: Notification[] = [];\r\n  private listeners: ((notifications: Notification[]) => void)[] = [];\r\n\r\n  // Add a new notification\r\n  addNotification(notification: Omit<Notification, 'id' | 'timestamp'>): string {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\r\n      timestamp: new Date(),\r\n      autoClose: notification.autoClose ?? true,\r\n      duration: notification.duration ?? 5000\r\n    };\r\n\r\n    this.notifications.push(newNotification);\r\n    this.notifyListeners();\r\n\r\n    // Auto-remove notification if autoClose is enabled\r\n    if (newNotification.autoClose) {\r\n      setTimeout(() => {\r\n        this.removeNotification(newNotification.id);\r\n      }, newNotification.duration);\r\n    }\r\n\r\n    return newNotification.id;\r\n  }\r\n\r\n  // Remove a notification\r\n  removeNotification(id: string): void {\r\n    this.notifications = this.notifications.filter(notification => notification.id !== id);\r\n    this.notifyListeners();\r\n  }\r\n\r\n  // Clear all notifications\r\n  clearAll(): void {\r\n    this.notifications = [];\r\n    this.notifyListeners();\r\n  }\r\n\r\n  // Get all notifications\r\n  getNotifications(): Notification[] {\r\n    return [...this.notifications];\r\n  }\r\n\r\n  // Subscribe to notification changes\r\n  subscribe(listener: (notifications: Notification[]) => void): () => void {\r\n    this.listeners.push(listener);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.listeners = this.listeners.filter(l => l !== listener);\r\n    };\r\n  }\r\n\r\n  // Notify all listeners\r\n  private notifyListeners(): void {\r\n    this.listeners.forEach(listener => listener([...this.notifications]));\r\n  }\r\n\r\n  // Convenience methods for different notification types\r\n  success(title: string, message: string, options?: Partial<Notification>): string {\r\n    return this.addNotification({\r\n      type: 'success',\r\n      title,\r\n      message,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  error(title: string, message: string, options?: Partial<Notification>): string {\r\n    return this.addNotification({\r\n      type: 'error',\r\n      title,\r\n      message,\r\n      autoClose: false, // Errors should be manually dismissed\r\n      ...options\r\n    });\r\n  }\r\n\r\n  warning(title: string, message: string, options?: Partial<Notification>): string {\r\n    return this.addNotification({\r\n      type: 'warning',\r\n      title,\r\n      message,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  info(title: string, message: string, options?: Partial<Notification>): string {\r\n    return this.addNotification({\r\n      type: 'info',\r\n      title,\r\n      message,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  // Predefined notifications for common actions\r\n  requestCreated(refNumber: string): string {\r\n    return this.success(\r\n      'Request Created',\r\n      `Withdrawal request ${refNumber} has been created successfully.`\r\n    );\r\n  }\r\n\r\n  requestApproved(refNumber: string): string {\r\n    return this.success(\r\n      'Request Approved',\r\n      `Withdrawal request ${refNumber} has been approved and moved to Core Banking.`\r\n    );\r\n  }\r\n\r\n  requestRejected(refNumber: string): string {\r\n    return this.warning(\r\n      'Request Rejected',\r\n      `Withdrawal request ${refNumber} has been rejected and returned to Initial Review.`\r\n    );\r\n  }\r\n\r\n  requestDisbursed(refNumber: string): string {\r\n    return this.success(\r\n      'Request Disbursed',\r\n      `Withdrawal request ${refNumber} has been successfully disbursed.`\r\n    );\r\n  }\r\n\r\n  loginSuccess(userName: string): string {\r\n    return this.success(\r\n      'Login Successful',\r\n      `Welcome back, ${userName}! You are now logged in.`\r\n    );\r\n  }\r\n\r\n  loginError(reason: string): string {\r\n    return this.error(\r\n      'Login Failed',\r\n      reason\r\n    );\r\n  }\r\n\r\n  permissionDenied(action: string, userRole?: string, requiredRole?: string): string {\r\n    const title = 'ðŸš« Access Denied';\r\n    const message = userRole && requiredRole\r\n      ? `Your role (${userRole.replace('_', ' ')}) cannot ${action}. Only ${requiredRole.replace('_', ' ')} members can perform this action.`\r\n      : `You do not have permission to ${action}. Please contact your administrator.`;\r\n\r\n    return this.error(title, message, {\r\n      duration: 8000, // Longer duration for permission errors\r\n      autoClose: false // Require manual dismissal\r\n    });\r\n  }\r\n\r\n  validationError(errors: string[]): string {\r\n    return this.error(\r\n      'Validation Error',\r\n      `Please fix the following errors: ${errors.join(', ')}`\r\n    );\r\n  }\r\n\r\n  networkError(): string {\r\n    return this.error(\r\n      'Network Error',\r\n      'Unable to connect to the server. Please check your internet connection and try again.'\r\n    );\r\n  }\r\n\r\n  unexpectedError(): string {\r\n    return this.error(\r\n      'Unexpected Error',\r\n      'An unexpected error occurred. Please try again or contact support if the problem persists.'\r\n    );\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}