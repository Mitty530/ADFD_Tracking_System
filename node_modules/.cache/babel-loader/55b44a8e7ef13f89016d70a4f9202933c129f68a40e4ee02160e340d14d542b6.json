{"ast":null,"code":"import { ROLE_PERMISSIONS, STAGE_TRANSITIONS } from '../types/withdrawalTypes';\nclass PermissionService {\n  // Check if user has permission for a specific action\n  hasPermission(user, action) {\n    if (!user) return action === 'view'; // Only viewing is allowed without login\n\n    return ROLE_PERMISSIONS[user.role].includes(action);\n  }\n\n  // Check if user can perform action on a specific request\n  canPerformAction(user, action, request) {\n    // Check basic permission first\n    if (!this.hasPermission(user, action)) {\n      return {\n        canPerform: false,\n        reason: `Your role (${(user === null || user === void 0 ? void 0 : user.role) || 'guest'}) does not have permission to ${action}.`\n      };\n    }\n\n    // If no request specified, just check basic permission\n    if (!request) {\n      return {\n        canPerform: true\n      };\n    }\n\n    // Additional checks based on action and request state\n    switch (action) {\n      case 'create_request':\n        // Archive team can always create requests\n        return {\n          canPerform: true\n        };\n      case 'approve':\n        if (request.currentStage !== 'technical_review') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be approved when in Technical Review stage.'\n          };\n        }\n        if ((user === null || user === void 0 ? void 0 : user.role) !== 'operations_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Operations Team can approve requests.'\n          };\n        }\n        return {\n          canPerform: true\n        };\n      case 'reject':\n        if (request.currentStage !== 'technical_review') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be rejected when in Technical Review stage.'\n          };\n        }\n        if ((user === null || user === void 0 ? void 0 : user.role) !== 'operations_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Operations Team can reject requests.'\n          };\n        }\n        return {\n          canPerform: true\n        };\n      case 'disburse':\n        if (request.currentStage !== 'core_banking') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be disbursed when in Core Banking stage.'\n          };\n        }\n        if ((user === null || user === void 0 ? void 0 : user.role) !== 'core_banking_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Core Banking Team can disburse requests.'\n          };\n        }\n        return {\n          canPerform: true\n        };\n      case 'view':\n        // Everyone can view requests\n        return {\n          canPerform: true\n        };\n      default:\n        return {\n          canPerform: false,\n          reason: 'Unknown action type.'\n        };\n    }\n  }\n\n  // Get available actions for a user on a specific request\n  getAvailableActions(user, request) {\n    const actions = ['view']; // Everyone can view\n\n    if (!user) return actions;\n\n    // Check each possible action\n    const possibleActions = ['approve', 'reject', 'disburse'];\n    possibleActions.forEach(action => {\n      const check = this.canPerformAction(user, action, request);\n      if (check.canPerform) {\n        actions.push(action);\n      }\n    });\n\n    // Archive team can always create new requests (not tied to specific request)\n    if (user.role === 'archive_team') {\n      actions.push('create_request');\n    }\n    return actions;\n  }\n\n  // Check if user can access the dashboard\n  canAccessDashboard(user) {\n    // Dashboard is publicly viewable, but actions require login\n    return {\n      canPerform: true\n    };\n  }\n\n  // Get user role display name\n  getRoleDisplayName(role) {\n    const roleNames = {\n      archive_team: 'Archive Team',\n      operations_team: 'Operations Team',\n      core_banking_team: 'Core Banking Team',\n      loan_admin: 'Loan Administrator'\n    };\n    return roleNames[role] || role;\n  }\n\n  // Get action display name\n  getActionDisplayName(action) {\n    const actionNames = {\n      create_request: 'Create Request',\n      approve: 'Approve Request',\n      reject: 'Reject Request',\n      disburse: 'Disburse Request',\n      view: 'View Request'\n    };\n    return actionNames[action] || action;\n  }\n\n  // Check if stage transition is valid\n  canTransitionToStage(currentStage, targetStage) {\n    const transitions = STAGE_TRANSITIONS[currentStage];\n    return transitions ? transitions.includes(targetStage) : false;\n  }\n\n  // Get required role for an action\n  getRequiredRole(action) {\n    for (const [role, permissions] of Object.entries(ROLE_PERMISSIONS)) {\n      if (permissions.includes(action)) {\n        return role;\n      }\n    }\n    return null;\n  }\n\n  // Validate user session\n  validateUserSession(user) {\n    if (!user) {\n      return {\n        canPerform: false,\n        reason: 'No active user session. Please log in.'\n      };\n    }\n\n    // Check if user object has required properties\n    if (!user.id || !user.role || !user.name) {\n      return {\n        canPerform: false,\n        reason: 'Invalid user session. Please log in again.'\n      };\n    }\n\n    // Check if role is valid\n    if (!Object.keys(ROLE_PERMISSIONS).includes(user.role)) {\n      return {\n        canPerform: false,\n        reason: 'Invalid user role. Please contact administrator.'\n      };\n    }\n    return {\n      canPerform: true\n    };\n  }\n\n  // Get permission summary for user\n  getPermissionSummary(user) {\n    if (!user) {\n      return {\n        role: 'Guest',\n        permissions: ['View requests'],\n        restrictions: ['Cannot perform any actions without login']\n      };\n    }\n    const permissions = ROLE_PERMISSIONS[user.role].map(action => this.getActionDisplayName(action));\n    const restrictions = [];\n    switch (user.role) {\n      case 'archive_team':\n        restrictions.push('Cannot approve, reject, or disburse requests');\n        break;\n      case 'operations_team':\n        restrictions.push('Cannot create or disburse requests');\n        restrictions.push('Can only act on requests in Technical Review stage');\n        break;\n      case 'core_banking_team':\n        restrictions.push('Cannot create, approve, or reject requests');\n        restrictions.push('Can only disburse requests in Core Banking stage');\n        break;\n      case 'loan_admin':\n        restrictions.push('Read-only access - cannot perform any actions');\n        break;\n    }\n    return {\n      role: this.getRoleDisplayName(user.role),\n      permissions,\n      restrictions\n    };\n  }\n\n  // Check if user owns or is assigned to a request\n  isRequestAssignedToUser(user, request) {\n    if (!user) return false;\n    return request.assignedTo === user.id || request.assignedTo === user.role;\n  }\n\n  // Get next possible stages for a request\n  getNextStages(currentStage) {\n    return STAGE_TRANSITIONS[currentStage] || [];\n  }\n}\nexport const permissionService = new PermissionService();","map":{"version":3,"names":["ROLE_PERMISSIONS","STAGE_TRANSITIONS","PermissionService","hasPermission","user","action","role","includes","canPerformAction","request","canPerform","reason","currentStage","getAvailableActions","actions","possibleActions","forEach","check","push","canAccessDashboard","getRoleDisplayName","roleNames","archive_team","operations_team","core_banking_team","loan_admin","getActionDisplayName","actionNames","create_request","approve","reject","disburse","view","canTransitionToStage","targetStage","transitions","getRequiredRole","permissions","Object","entries","validateUserSession","id","name","keys","getPermissionSummary","restrictions","map","isRequestAssignedToUser","assignedTo","getNextStages","permissionService"],"sources":["/Users/mamadouourydiallo/ADFI/src/services/permissionService.ts"],"sourcesContent":["import { User, UserRole, ActionType, WithdrawalRequest, PermissionCheck, ROLE_PERMISSIONS, STAGE_TRANSITIONS } from '../types/withdrawalTypes';\n\nclass PermissionService {\n  // Check if user has permission for a specific action\n  hasPermission(user: User | null, action: ActionType): boolean {\n    if (!user) return action === 'view'; // Only viewing is allowed without login\n    \n    return ROLE_PERMISSIONS[user.role].includes(action);\n  }\n\n  // Check if user can perform action on a specific request\n  canPerformAction(user: User | null, action: ActionType, request?: WithdrawalRequest): PermissionCheck {\n    // Check basic permission first\n    if (!this.hasPermission(user, action)) {\n      return {\n        canPerform: false,\n        reason: `Your role (${user?.role || 'guest'}) does not have permission to ${action}.`\n      };\n    }\n\n    // If no request specified, just check basic permission\n    if (!request) {\n      return { canPerform: true };\n    }\n\n    // Additional checks based on action and request state\n    switch (action) {\n      case 'create_request':\n        // Archive team can always create requests\n        return { canPerform: true };\n\n      case 'approve':\n        if (request.currentStage !== 'technical_review') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be approved when in Technical Review stage.'\n          };\n        }\n        if (user?.role !== 'operations_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Operations Team can approve requests.'\n          };\n        }\n        return { canPerform: true };\n\n      case 'reject':\n        if (request.currentStage !== 'technical_review') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be rejected when in Technical Review stage.'\n          };\n        }\n        if (user?.role !== 'operations_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Operations Team can reject requests.'\n          };\n        }\n        return { canPerform: true };\n\n      case 'disburse':\n        if (request.currentStage !== 'core_banking') {\n          return {\n            canPerform: false,\n            reason: 'Requests can only be disbursed when in Core Banking stage.'\n          };\n        }\n        if (user?.role !== 'core_banking_team') {\n          return {\n            canPerform: false,\n            reason: 'Only Core Banking Team can disburse requests.'\n          };\n        }\n        return { canPerform: true };\n\n      case 'view':\n        // Everyone can view requests\n        return { canPerform: true };\n\n      default:\n        return {\n          canPerform: false,\n          reason: 'Unknown action type.'\n        };\n    }\n  }\n\n  // Get available actions for a user on a specific request\n  getAvailableActions(user: User | null, request: WithdrawalRequest): ActionType[] {\n    const actions: ActionType[] = ['view']; // Everyone can view\n\n    if (!user) return actions;\n\n    // Check each possible action\n    const possibleActions: ActionType[] = ['approve', 'reject', 'disburse'];\n    \n    possibleActions.forEach(action => {\n      const check = this.canPerformAction(user, action, request);\n      if (check.canPerform) {\n        actions.push(action);\n      }\n    });\n\n    // Archive team can always create new requests (not tied to specific request)\n    if (user.role === 'archive_team') {\n      actions.push('create_request');\n    }\n\n    return actions;\n  }\n\n  // Check if user can access the dashboard\n  canAccessDashboard(user: User | null): PermissionCheck {\n    // Dashboard is publicly viewable, but actions require login\n    return { canPerform: true };\n  }\n\n  // Get user role display name\n  getRoleDisplayName(role: UserRole): string {\n    const roleNames: Record<UserRole, string> = {\n      archive_team: 'Archive Team',\n      operations_team: 'Operations Team',\n      core_banking_team: 'Core Banking Team',\n      loan_admin: 'Loan Administrator'\n    };\n    \n    return roleNames[role] || role;\n  }\n\n  // Get action display name\n  getActionDisplayName(action: ActionType): string {\n    const actionNames: Record<ActionType, string> = {\n      create_request: 'Create Request',\n      approve: 'Approve Request',\n      reject: 'Reject Request',\n      disburse: 'Disburse Request',\n      view: 'View Request'\n    };\n    \n    return actionNames[action] || action;\n  }\n\n  // Check if stage transition is valid\n  canTransitionToStage(currentStage: string, targetStage: string): boolean {\n    const transitions = STAGE_TRANSITIONS[currentStage as keyof typeof STAGE_TRANSITIONS];\n    return transitions ? transitions.includes(targetStage as any) : false;\n  }\n\n  // Get required role for an action\n  getRequiredRole(action: ActionType): UserRole | null {\n    for (const [role, permissions] of Object.entries(ROLE_PERMISSIONS)) {\n      if (permissions.includes(action)) {\n        return role as UserRole;\n      }\n    }\n    return null;\n  }\n\n  // Validate user session\n  validateUserSession(user: User | null): PermissionCheck {\n    if (!user) {\n      return {\n        canPerform: false,\n        reason: 'No active user session. Please log in.'\n      };\n    }\n\n    // Check if user object has required properties\n    if (!user.id || !user.role || !user.name) {\n      return {\n        canPerform: false,\n        reason: 'Invalid user session. Please log in again.'\n      };\n    }\n\n    // Check if role is valid\n    if (!Object.keys(ROLE_PERMISSIONS).includes(user.role)) {\n      return {\n        canPerform: false,\n        reason: 'Invalid user role. Please contact administrator.'\n      };\n    }\n\n    return { canPerform: true };\n  }\n\n  // Get permission summary for user\n  getPermissionSummary(user: User | null): {\n    role: string;\n    permissions: string[];\n    restrictions: string[];\n  } {\n    if (!user) {\n      return {\n        role: 'Guest',\n        permissions: ['View requests'],\n        restrictions: ['Cannot perform any actions without login']\n      };\n    }\n\n    const permissions = ROLE_PERMISSIONS[user.role].map(action => \n      this.getActionDisplayName(action)\n    );\n\n    const restrictions: string[] = [];\n    \n    switch (user.role) {\n      case 'archive_team':\n        restrictions.push('Cannot approve, reject, or disburse requests');\n        break;\n      case 'operations_team':\n        restrictions.push('Cannot create or disburse requests');\n        restrictions.push('Can only act on requests in Technical Review stage');\n        break;\n      case 'core_banking_team':\n        restrictions.push('Cannot create, approve, or reject requests');\n        restrictions.push('Can only disburse requests in Core Banking stage');\n        break;\n      case 'loan_admin':\n        restrictions.push('Read-only access - cannot perform any actions');\n        break;\n    }\n\n    return {\n      role: this.getRoleDisplayName(user.role),\n      permissions,\n      restrictions\n    };\n  }\n\n  // Check if user owns or is assigned to a request\n  isRequestAssignedToUser(user: User | null, request: WithdrawalRequest): boolean {\n    if (!user) return false;\n    return request.assignedTo === user.id || request.assignedTo === user.role;\n  }\n\n  // Get next possible stages for a request\n  getNextStages(currentStage: string): string[] {\n    return STAGE_TRANSITIONS[currentStage as keyof typeof STAGE_TRANSITIONS] || [];\n  }\n}\n\nexport const permissionService = new PermissionService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}