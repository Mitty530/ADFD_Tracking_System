{"ast":null,"code":"// Form Validation Utilities for Manual Withdrawal Request Form\n// Provides comprehensive validation functions for all form fields\n\n// IBAN validation utility\nexport const validateIBAN = iban => {\n  if (!iban) {\n    return {\n      isValid: false,\n      message: 'IBAN is required',\n      severity: 'error'\n    };\n  }\n\n  // Remove spaces and convert to uppercase\n  const cleanIBAN = iban.replace(/\\s/g, '').toUpperCase();\n\n  // Check length (15-34 characters)\n  if (cleanIBAN.length < 15 || cleanIBAN.length > 34) {\n    return {\n      isValid: false,\n      message: 'IBAN must be between 15-34 characters',\n      severity: 'error'\n    };\n  }\n\n  // Check format (2 letters + 2 digits + alphanumeric)\n  const ibanRegex = /^[A-Z]{2}[0-9]{2}[A-Z0-9]+$/;\n  if (!ibanRegex.test(cleanIBAN)) {\n    return {\n      isValid: false,\n      message: 'Invalid IBAN format (e.g., GB82WEST12345698765432)',\n      severity: 'error'\n    };\n  }\n\n  // Basic checksum validation (simplified)\n  try {\n    const rearranged = cleanIBAN.slice(4) + cleanIBAN.slice(0, 4);\n    const numericString = rearranged.replace(/[A-Z]/g, char => (char.charCodeAt(0) - 55).toString());\n\n    // For large numbers, we'll do a simplified check\n    if (numericString.length > 15) {\n      return {\n        isValid: true,\n        message: 'IBAN format appears valid',\n        severity: 'info'\n      };\n    }\n    const remainder = BigInt(numericString) % BigInt(97);\n    if (remainder !== BigInt(1)) {\n      return {\n        isValid: false,\n        message: 'IBAN checksum validation failed',\n        severity: 'error'\n      };\n    }\n  } catch (error) {\n    return {\n      isValid: true,\n      message: 'IBAN format appears valid (checksum not verified)',\n      severity: 'info'\n    };\n  }\n  return {\n    isValid: true,\n    message: 'Valid IBAN',\n    severity: 'info'\n  };\n};\n\n// SWIFT code validation\nexport const validateSWIFT = swift => {\n  if (!swift) {\n    return {\n      isValid: false,\n      message: 'SWIFT code is required',\n      severity: 'error'\n    };\n  }\n  const cleanSWIFT = swift.replace(/\\s/g, '').toUpperCase();\n\n  // SWIFT codes are 8 or 11 characters\n  if (cleanSWIFT.length !== 8 && cleanSWIFT.length !== 11) {\n    return {\n      isValid: false,\n      message: 'SWIFT code must be 8 or 11 characters',\n      severity: 'error'\n    };\n  }\n\n  // Format: 4 letters (bank) + 2 letters (country) + 2 alphanumeric (location) + optional 3 alphanumeric (branch)\n  const swiftRegex = /^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\n  if (!swiftRegex.test(cleanSWIFT)) {\n    return {\n      isValid: false,\n      message: 'Invalid SWIFT format (e.g., DEUTDEFF or DEUTDEFF500)',\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true,\n    message: 'Valid SWIFT code',\n    severity: 'info'\n  };\n};\n\n// Email validation\nexport const validateEmail = email => {\n  if (!email) {\n    return {\n      isValid: false,\n      message: 'Email is required',\n      severity: 'error'\n    };\n  }\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return {\n      isValid: false,\n      message: 'Please enter a valid email address',\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Amount validation\nexport const validateAmount = amount => {\n  if (!amount) {\n    return {\n      isValid: false,\n      message: 'Amount is required',\n      severity: 'error'\n    };\n  }\n\n  // Remove commas and spaces\n  const cleanAmount = amount.replace(/[,\\s]/g, '');\n\n  // Check if it's a valid number\n  const numericAmount = parseFloat(cleanAmount);\n  if (isNaN(numericAmount)) {\n    return {\n      isValid: false,\n      message: 'Please enter a valid amount',\n      severity: 'error'\n    };\n  }\n\n  // Check if positive\n  if (numericAmount <= 0) {\n    return {\n      isValid: false,\n      message: 'Amount must be greater than zero',\n      severity: 'error'\n    };\n  }\n\n  // Check reasonable limits (up to 1 billion)\n  if (numericAmount > 1000000000) {\n    return {\n      isValid: false,\n      message: 'Amount exceeds maximum limit',\n      severity: 'error'\n    };\n  }\n\n  // Check decimal places (max 2)\n  const decimalPlaces = (cleanAmount.split('.')[1] || '').length;\n  if (decimalPlaces > 2) {\n    return {\n      isValid: false,\n      message: 'Amount can have maximum 2 decimal places',\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true,\n    message: `Amount: ${numericAmount.toLocaleString()}`,\n    severity: 'info'\n  };\n};\n\n// Date validation\nexport const validateDate = (date, fieldName = 'Date') => {\n  if (!date) {\n    return {\n      isValid: false,\n      message: `${fieldName} is required`,\n      severity: 'error'\n    };\n  }\n  const dateObj = new Date(date);\n  if (isNaN(dateObj.getTime())) {\n    return {\n      isValid: false,\n      message: `Please enter a valid ${fieldName.toLowerCase()}`,\n      severity: 'error'\n    };\n  }\n\n  // Check if date is not too far in the past (more than 10 years)\n  const tenYearsAgo = new Date();\n  tenYearsAgo.setFullYear(tenYearsAgo.getFullYear() - 10);\n  if (dateObj < tenYearsAgo) {\n    return {\n      isValid: false,\n      message: `${fieldName} cannot be more than 10 years ago`,\n      severity: 'warning'\n    };\n  }\n\n  // Check if date is not too far in the future (more than 5 years)\n  const fiveYearsFromNow = new Date();\n  fiveYearsFromNow.setFullYear(fiveYearsFromNow.getFullYear() + 5);\n  if (dateObj > fiveYearsFromNow) {\n    return {\n      isValid: false,\n      message: `${fieldName} cannot be more than 5 years in the future`,\n      severity: 'warning'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Required field validation\nexport const validateRequired = (value, fieldName) => {\n  if (!value || value.trim().length === 0) {\n    return {\n      isValid: false,\n      message: `${fieldName} is required`,\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Text length validation\nexport const validateLength = (value, minLength = 0, maxLength = 1000, fieldName = 'Field') => {\n  if (value.length < minLength) {\n    return {\n      isValid: false,\n      message: `${fieldName} must be at least ${minLength} characters`,\n      severity: 'error'\n    };\n  }\n  if (value.length > maxLength) {\n    return {\n      isValid: false,\n      message: `${fieldName} cannot exceed ${maxLength} characters`,\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Phone number validation (international format)\nexport const validatePhone = phone => {\n  if (!phone) {\n    return {\n      isValid: false,\n      message: 'Phone number is required',\n      severity: 'error'\n    };\n  }\n\n  // Remove spaces, dashes, parentheses\n  const cleanPhone = phone.replace(/[\\s\\-()]/g, '');\n\n  // Check for international format (+country code + number)\n  const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n  if (!phoneRegex.test(cleanPhone)) {\n    return {\n      isValid: false,\n      message: 'Please enter phone in international format (+1234567890)',\n      severity: 'error'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Comprehensive field validator\nexport const validateField = (fieldName, value, formData) => {\n  // Handle empty values for optional fields\n  if (!value && !isRequiredField(fieldName)) {\n    return {\n      isValid: true\n    };\n  }\n  switch (fieldName) {\n    case 'iban':\n      return validateIBAN(value);\n    case 'swiftCode':\n    case 'correspondenceSwiftCode':\n      return validateSWIFT(value);\n    case 'requestedAmount':\n      return validateAmount(value);\n    case 'agreementDate':\n      return validateDate(value, 'Agreement Date');\n    case 'valueDate':\n      return validateDate(value, 'Value Date');\n    case 'signatureDate':\n      return validateDate(value, 'Signature Date');\n    case 'beneficiaryName':\n      const nameValidation = validateRequired(value, 'Beneficiary Name');\n      if (!nameValidation.isValid) return nameValidation;\n      return validateLength(value, 2, 100, 'Beneficiary Name');\n    case 'projectName':\n      const projectValidation = validateRequired(value, 'Project Name');\n      if (!projectValidation.isValid) return projectValidation;\n      return validateLength(value, 2, 200, 'Project Name');\n    case 'paymentPurpose':\n      const purposeValidation = validateRequired(value, 'Payment Purpose');\n      if (!purposeValidation.isValid) return purposeValidation;\n      return validateLength(value, 5, 500, 'Payment Purpose');\n    case 'bankName':\n      const bankValidation = validateRequired(value, 'Bank Name');\n      if (!bankValidation.isValid) return bankValidation;\n      return validateLength(value, 2, 100, 'Bank Name');\n    case 'authorizedRepresentative1':\n      const rep1Validation = validateRequired(value, 'Authorized Representative');\n      if (!rep1Validation.isValid) return rep1Validation;\n      return validateLength(value, 2, 100, 'Authorized Representative');\n    default:\n      // Generic validation for other fields\n      if (isRequiredField(fieldName)) {\n        return validateRequired(value, getFieldDisplayName(fieldName));\n      }\n      return {\n        isValid: true\n      };\n  }\n};\n\n// Helper function to check if field is required\nconst isRequiredField = fieldName => {\n  const requiredFields = ['country', 'projectName', 'contractReference', 'requestedAmount', 'paymentPurpose', 'valueDate', 'beneficiaryName', 'bankName', 'iban', 'swiftCode', 'authorizedRepresentative1', 'signatureDate'];\n  return requiredFields.includes(fieldName);\n};\n\n// Helper function to get display name for field\nconst getFieldDisplayName = fieldName => {\n  const displayNames = {\n    projectNumber: 'Project Number',\n    referenceNumber: 'Reference Number',\n    country: 'Country',\n    projectName: 'Project Name',\n    projectDescription: 'Project Description',\n    contractReference: 'Contract Reference',\n    agreementDate: 'Agreement Date',\n    agreementParty: 'Agreement Party',\n    requestedAmount: 'Requested Amount',\n    currency: 'Currency',\n    vatStatus: 'VAT Status',\n    paymentPurpose: 'Payment Purpose',\n    valueDate: 'Value Date',\n    beneficiaryName: 'Beneficiary Name',\n    beneficiaryAddress: 'Beneficiary Address',\n    bankName: 'Bank Name',\n    bankAddress: 'Bank Address',\n    accountNumber: 'Account Number',\n    iban: 'IBAN',\n    swiftCode: 'SWIFT Code',\n    correspondenceBankName: 'Correspondence Bank Name',\n    correspondenceBankAddress: 'Correspondence Bank Address',\n    correspondenceSwiftCode: 'Correspondence SWIFT Code',\n    authorizedRepresentative1: 'Authorized Representative 1',\n    authorizedRepresentative1Title: 'Representative 1 Title',\n    authorizedRepresentative2: 'Authorized Representative 2',\n    authorizedRepresentative2Title: 'Representative 2 Title',\n    signatureDate: 'Signature Date',\n    additionalNotes: 'Additional Notes',\n    priority: 'Priority',\n    requestDate: 'Request Date'\n  };\n  return displayNames[fieldName] || fieldName;\n};\n\n// Format amount for display\nexport const formatAmount = amount => {\n  if (!amount) return '';\n  const numericAmount = parseFloat(amount.replace(/[,\\s]/g, ''));\n  if (isNaN(numericAmount)) return amount;\n  return numericAmount.toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\n\n// Format IBAN for display (with spaces every 4 characters)\nexport const formatIBAN = iban => {\n  if (!iban) return '';\n  const cleanIBAN = iban.replace(/\\s/g, '').toUpperCase();\n  return cleanIBAN.replace(/(.{4})/g, '$1 ').trim();\n};","map":{"version":3,"names":["validateIBAN","iban","isValid","message","severity","cleanIBAN","replace","toUpperCase","length","ibanRegex","test","rearranged","slice","numericString","char","charCodeAt","toString","remainder","BigInt","error","validateSWIFT","swift","cleanSWIFT","swiftRegex","validateEmail","email","emailRegex","validateAmount","amount","cleanAmount","numericAmount","parseFloat","isNaN","decimalPlaces","split","toLocaleString","validateDate","date","fieldName","dateObj","Date","getTime","toLowerCase","tenYearsAgo","setFullYear","getFullYear","fiveYearsFromNow","validateRequired","value","trim","validateLength","minLength","maxLength","validatePhone","phone","cleanPhone","phoneRegex","validateField","formData","isRequiredField","nameValidation","projectValidation","purposeValidation","bankValidation","rep1Validation","getFieldDisplayName","requiredFields","includes","displayNames","projectNumber","referenceNumber","country","projectName","projectDescription","contractReference","agreementDate","agreementParty","requestedAmount","currency","vatStatus","paymentPurpose","valueDate","beneficiaryName","beneficiaryAddress","bankName","bankAddress","accountNumber","swiftCode","correspondenceBankName","correspondenceBankAddress","correspondenceSwiftCode","authorizedRepresentative1","authorizedRepresentative1Title","authorizedRepresentative2","authorizedRepresentative2Title","signatureDate","additionalNotes","priority","requestDate","formatAmount","minimumFractionDigits","maximumFractionDigits","formatIBAN"],"sources":["C:/Users/Ousmane/Documents/TrackingSystem/ADFD_Tracking_System/src/utils/formValidation.ts"],"sourcesContent":["// Form Validation Utilities for Manual Withdrawal Request Form\r\n// Provides comprehensive validation functions for all form fields\r\n\r\nimport { ValidationResult, ManualFormData } from '../types/manualFormTypes';\r\n\r\n// IBAN validation utility\r\nexport const validateIBAN = (iban: string): ValidationResult => {\r\n  if (!iban) {\r\n    return { isValid: false, message: 'IBAN is required', severity: 'error' };\r\n  }\r\n\r\n  // Remove spaces and convert to uppercase\r\n  const cleanIBAN = iban.replace(/\\s/g, '').toUpperCase();\r\n  \r\n  // Check length (15-34 characters)\r\n  if (cleanIBAN.length < 15 || cleanIBAN.length > 34) {\r\n    return { isValid: false, message: 'IBAN must be between 15-34 characters', severity: 'error' };\r\n  }\r\n\r\n  // Check format (2 letters + 2 digits + alphanumeric)\r\n  const ibanRegex = /^[A-Z]{2}[0-9]{2}[A-Z0-9]+$/;\r\n  if (!ibanRegex.test(cleanIBAN)) {\r\n    return { isValid: false, message: 'Invalid IBAN format (e.g., GB82WEST12345698765432)', severity: 'error' };\r\n  }\r\n\r\n  // Basic checksum validation (simplified)\r\n  try {\r\n    const rearranged = cleanIBAN.slice(4) + cleanIBAN.slice(0, 4);\r\n    const numericString = rearranged.replace(/[A-Z]/g, (char) => (char.charCodeAt(0) - 55).toString());\r\n    \r\n    // For large numbers, we'll do a simplified check\r\n    if (numericString.length > 15) {\r\n      return { isValid: true, message: 'IBAN format appears valid', severity: 'info' };\r\n    }\r\n    \r\n    const remainder = BigInt(numericString) % BigInt(97);\r\n    if (remainder !== BigInt(1)) {\r\n      return { isValid: false, message: 'IBAN checksum validation failed', severity: 'error' };\r\n    }\r\n  } catch (error) {\r\n    return { isValid: true, message: 'IBAN format appears valid (checksum not verified)', severity: 'info' };\r\n  }\r\n\r\n  return { isValid: true, message: 'Valid IBAN', severity: 'info' };\r\n};\r\n\r\n// SWIFT code validation\r\nexport const validateSWIFT = (swift: string): ValidationResult => {\r\n  if (!swift) {\r\n    return { isValid: false, message: 'SWIFT code is required', severity: 'error' };\r\n  }\r\n\r\n  const cleanSWIFT = swift.replace(/\\s/g, '').toUpperCase();\r\n  \r\n  // SWIFT codes are 8 or 11 characters\r\n  if (cleanSWIFT.length !== 8 && cleanSWIFT.length !== 11) {\r\n    return { isValid: false, message: 'SWIFT code must be 8 or 11 characters', severity: 'error' };\r\n  }\r\n\r\n  // Format: 4 letters (bank) + 2 letters (country) + 2 alphanumeric (location) + optional 3 alphanumeric (branch)\r\n  const swiftRegex = /^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\r\n  if (!swiftRegex.test(cleanSWIFT)) {\r\n    return { isValid: false, message: 'Invalid SWIFT format (e.g., DEUTDEFF or DEUTDEFF500)', severity: 'error' };\r\n  }\r\n\r\n  return { isValid: true, message: 'Valid SWIFT code', severity: 'info' };\r\n};\r\n\r\n// Email validation\r\nexport const validateEmail = (email: string): ValidationResult => {\r\n  if (!email) {\r\n    return { isValid: false, message: 'Email is required', severity: 'error' };\r\n  }\r\n\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    return { isValid: false, message: 'Please enter a valid email address', severity: 'error' };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n// Amount validation\r\nexport const validateAmount = (amount: string): ValidationResult => {\r\n  if (!amount) {\r\n    return { isValid: false, message: 'Amount is required', severity: 'error' };\r\n  }\r\n\r\n  // Remove commas and spaces\r\n  const cleanAmount = amount.replace(/[,\\s]/g, '');\r\n  \r\n  // Check if it's a valid number\r\n  const numericAmount = parseFloat(cleanAmount);\r\n  if (isNaN(numericAmount)) {\r\n    return { isValid: false, message: 'Please enter a valid amount', severity: 'error' };\r\n  }\r\n\r\n  // Check if positive\r\n  if (numericAmount <= 0) {\r\n    return { isValid: false, message: 'Amount must be greater than zero', severity: 'error' };\r\n  }\r\n\r\n  // Check reasonable limits (up to 1 billion)\r\n  if (numericAmount > 1000000000) {\r\n    return { isValid: false, message: 'Amount exceeds maximum limit', severity: 'error' };\r\n  }\r\n\r\n  // Check decimal places (max 2)\r\n  const decimalPlaces = (cleanAmount.split('.')[1] || '').length;\r\n  if (decimalPlaces > 2) {\r\n    return { isValid: false, message: 'Amount can have maximum 2 decimal places', severity: 'error' };\r\n  }\r\n\r\n  return { isValid: true, message: `Amount: ${numericAmount.toLocaleString()}`, severity: 'info' };\r\n};\r\n\r\n// Date validation\r\nexport const validateDate = (date: string, fieldName: string = 'Date'): ValidationResult => {\r\n  if (!date) {\r\n    return { isValid: false, message: `${fieldName} is required`, severity: 'error' };\r\n  }\r\n\r\n  const dateObj = new Date(date);\r\n  if (isNaN(dateObj.getTime())) {\r\n    return { isValid: false, message: `Please enter a valid ${fieldName.toLowerCase()}`, severity: 'error' };\r\n  }\r\n\r\n  // Check if date is not too far in the past (more than 10 years)\r\n  const tenYearsAgo = new Date();\r\n  tenYearsAgo.setFullYear(tenYearsAgo.getFullYear() - 10);\r\n  \r\n  if (dateObj < tenYearsAgo) {\r\n    return { isValid: false, message: `${fieldName} cannot be more than 10 years ago`, severity: 'warning' };\r\n  }\r\n\r\n  // Check if date is not too far in the future (more than 5 years)\r\n  const fiveYearsFromNow = new Date();\r\n  fiveYearsFromNow.setFullYear(fiveYearsFromNow.getFullYear() + 5);\r\n  \r\n  if (dateObj > fiveYearsFromNow) {\r\n    return { isValid: false, message: `${fieldName} cannot be more than 5 years in the future`, severity: 'warning' };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n// Required field validation\r\nexport const validateRequired = (value: string, fieldName: string): ValidationResult => {\r\n  if (!value || value.trim().length === 0) {\r\n    return { isValid: false, message: `${fieldName} is required`, severity: 'error' };\r\n  }\r\n  return { isValid: true };\r\n};\r\n\r\n// Text length validation\r\nexport const validateLength = (value: string, minLength: number = 0, maxLength: number = 1000, fieldName: string = 'Field'): ValidationResult => {\r\n  if (value.length < minLength) {\r\n    return { isValid: false, message: `${fieldName} must be at least ${minLength} characters`, severity: 'error' };\r\n  }\r\n  \r\n  if (value.length > maxLength) {\r\n    return { isValid: false, message: `${fieldName} cannot exceed ${maxLength} characters`, severity: 'error' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\n// Phone number validation (international format)\r\nexport const validatePhone = (phone: string): ValidationResult => {\r\n  if (!phone) {\r\n    return { isValid: false, message: 'Phone number is required', severity: 'error' };\r\n  }\r\n\r\n  // Remove spaces, dashes, parentheses\r\n  const cleanPhone = phone.replace(/[\\s\\-()]/g, '');\r\n  \r\n  // Check for international format (+country code + number)\r\n  const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\r\n  if (!phoneRegex.test(cleanPhone)) {\r\n    return { isValid: false, message: 'Please enter phone in international format (+1234567890)', severity: 'error' };\r\n  }\r\n\r\n  return { isValid: true };\r\n};\r\n\r\n// Comprehensive field validator\r\nexport const validateField = (fieldName: keyof ManualFormData, value: string, formData: ManualFormData): ValidationResult => {\r\n  // Handle empty values for optional fields\r\n  if (!value && !isRequiredField(fieldName)) {\r\n    return { isValid: true };\r\n  }\r\n\r\n  switch (fieldName) {\r\n    case 'iban':\r\n      return validateIBAN(value);\r\n    \r\n    case 'swiftCode':\r\n    case 'correspondenceSwiftCode':\r\n      return validateSWIFT(value);\r\n    \r\n    case 'requestedAmount':\r\n      return validateAmount(value);\r\n    \r\n    case 'agreementDate':\r\n      return validateDate(value, 'Agreement Date');\r\n    \r\n    case 'valueDate':\r\n      return validateDate(value, 'Value Date');\r\n    \r\n    case 'signatureDate':\r\n      return validateDate(value, 'Signature Date');\r\n    \r\n    case 'beneficiaryName':\r\n      const nameValidation = validateRequired(value, 'Beneficiary Name');\r\n      if (!nameValidation.isValid) return nameValidation;\r\n      return validateLength(value, 2, 100, 'Beneficiary Name');\r\n    \r\n    case 'projectName':\r\n      const projectValidation = validateRequired(value, 'Project Name');\r\n      if (!projectValidation.isValid) return projectValidation;\r\n      return validateLength(value, 2, 200, 'Project Name');\r\n    \r\n    case 'paymentPurpose':\r\n      const purposeValidation = validateRequired(value, 'Payment Purpose');\r\n      if (!purposeValidation.isValid) return purposeValidation;\r\n      return validateLength(value, 5, 500, 'Payment Purpose');\r\n    \r\n    case 'bankName':\r\n      const bankValidation = validateRequired(value, 'Bank Name');\r\n      if (!bankValidation.isValid) return bankValidation;\r\n      return validateLength(value, 2, 100, 'Bank Name');\r\n    \r\n    case 'authorizedRepresentative1':\r\n      const rep1Validation = validateRequired(value, 'Authorized Representative');\r\n      if (!rep1Validation.isValid) return rep1Validation;\r\n      return validateLength(value, 2, 100, 'Authorized Representative');\r\n    \r\n    default:\r\n      // Generic validation for other fields\r\n      if (isRequiredField(fieldName)) {\r\n        return validateRequired(value, getFieldDisplayName(fieldName));\r\n      }\r\n      return { isValid: true };\r\n  }\r\n};\r\n\r\n// Helper function to check if field is required\r\nconst isRequiredField = (fieldName: keyof ManualFormData): boolean => {\r\n  const requiredFields: (keyof ManualFormData)[] = [\r\n    'country',\r\n    'projectName',\r\n    'contractReference',\r\n    'requestedAmount',\r\n    'paymentPurpose',\r\n    'valueDate',\r\n    'beneficiaryName',\r\n    'bankName',\r\n    'iban',\r\n    'swiftCode',\r\n    'authorizedRepresentative1',\r\n    'signatureDate'\r\n  ];\r\n  \r\n  return requiredFields.includes(fieldName);\r\n};\r\n\r\n// Helper function to get display name for field\r\nconst getFieldDisplayName = (fieldName: keyof ManualFormData): string => {\r\n  const displayNames: Record<keyof ManualFormData, string> = {\r\n    projectNumber: 'Project Number',\r\n    referenceNumber: 'Reference Number',\r\n    country: 'Country',\r\n    projectName: 'Project Name',\r\n    projectDescription: 'Project Description',\r\n    contractReference: 'Contract Reference',\r\n    agreementDate: 'Agreement Date',\r\n    agreementParty: 'Agreement Party',\r\n    requestedAmount: 'Requested Amount',\r\n    currency: 'Currency',\r\n    vatStatus: 'VAT Status',\r\n    paymentPurpose: 'Payment Purpose',\r\n    valueDate: 'Value Date',\r\n    beneficiaryName: 'Beneficiary Name',\r\n    beneficiaryAddress: 'Beneficiary Address',\r\n    bankName: 'Bank Name',\r\n    bankAddress: 'Bank Address',\r\n    accountNumber: 'Account Number',\r\n    iban: 'IBAN',\r\n    swiftCode: 'SWIFT Code',\r\n    correspondenceBankName: 'Correspondence Bank Name',\r\n    correspondenceBankAddress: 'Correspondence Bank Address',\r\n    correspondenceSwiftCode: 'Correspondence SWIFT Code',\r\n    authorizedRepresentative1: 'Authorized Representative 1',\r\n    authorizedRepresentative1Title: 'Representative 1 Title',\r\n    authorizedRepresentative2: 'Authorized Representative 2',\r\n    authorizedRepresentative2Title: 'Representative 2 Title',\r\n    signatureDate: 'Signature Date',\r\n    additionalNotes: 'Additional Notes',\r\n    priority: 'Priority',\r\n    requestDate: 'Request Date'\r\n  };\r\n  \r\n  return displayNames[fieldName] || fieldName;\r\n};\r\n\r\n// Format amount for display\r\nexport const formatAmount = (amount: string): string => {\r\n  if (!amount) return '';\r\n  \r\n  const numericAmount = parseFloat(amount.replace(/[,\\s]/g, ''));\r\n  if (isNaN(numericAmount)) return amount;\r\n  \r\n  return numericAmount.toLocaleString('en-US', {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  });\r\n};\r\n\r\n// Format IBAN for display (with spaces every 4 characters)\r\nexport const formatIBAN = (iban: string): string => {\r\n  if (!iban) return '';\r\n  \r\n  const cleanIBAN = iban.replace(/\\s/g, '').toUpperCase();\r\n  return cleanIBAN.replace(/(.{4})/g, '$1 ').trim();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}