{"ast":null,"code":"var _jsxFileName = \"/Users/mamadouourydiallo/ADFI/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { getAuthorizedUser, isAuthorizedUser } from '../config/authorizedUsers';\nimport { AuditTrailService } from '../lib/auditTrail';\nimport { DatabaseService } from '../lib/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        // Log session end if user was previously logged in\n        if (event === 'SIGNED_OUT') {\n          await AuditTrailService.logSessionEnd('logout');\n        }\n        setUser(null);\n        setLoading(false);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const fetchUserProfile = async authUser => {\n    try {\n      var _authUser$user_metada, _authUser$email, _authUser$user_metada2;\n      // Create a basic profile from auth user data first\n      const basicProfile = {\n        id: authUser.id,\n        name: ((_authUser$user_metada = authUser.user_metadata) === null || _authUser$user_metada === void 0 ? void 0 : _authUser$user_metada.name) || ((_authUser$email = authUser.email) === null || _authUser$email === void 0 ? void 0 : _authUser$email.split('@')[0]) || 'User',\n        email: authUser.email || '',\n        role: ((_authUser$user_metada2 = authUser.user_metadata) === null || _authUser$user_metada2 === void 0 ? void 0 : _authUser$user_metada2.role) || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to get authorized user profile first\n      const authorizedUser = getAuthorizedUser(authUser.email || '');\n      if (authorizedUser) {\n        // Use authorized user profile\n        const userProfile = {\n          id: authUser.id,\n          name: authorizedUser.name,\n          email: authUser.email || '',\n          role: authorizedUser.role,\n          region: undefined,\n          regional_countries: undefined,\n          can_create_requests: authorizedUser.can_create_requests,\n          can_approve_reject: authorizedUser.can_approve_reject,\n          can_disburse: authorizedUser.can_disburse,\n          view_only_access: authorizedUser.view_only_access,\n          is_active: true,\n          avatar_url: undefined\n        };\n\n        // Initialize audit trail for this session\n        const sessionId = `session_${Date.now()}_${authUser.id}`;\n        localStorage.setItem('adfd-session-start', Date.now().toString());\n        localStorage.setItem('adfd-session-id', sessionId);\n        AuditTrailService.initialize(authUser.id, sessionId);\n\n        // Create user session record\n        await DatabaseService.createUserSession({\n          id: sessionId,\n          user_id: authUser.id,\n          session_token: (session === null || session === void 0 ? void 0 : session.access_token) || '',\n          ip_address: undefined,\n          // Will be populated by audit service\n          user_agent: navigator.userAgent,\n          login_at: new Date().toISOString(),\n          is_active: true,\n          remember_me: localStorage.getItem('adfd-remember-me') === 'true'\n        });\n\n        // Log successful login\n        await AuditTrailService.logUserActivity('login', `User ${userProfile.name} logged in successfully`, {\n          user_role: userProfile.role,\n          user_department: authorizedUser.department,\n          login_method: 'magic_link',\n          session_id: sessionId\n        });\n        setUser(userProfile);\n        console.log('✅ Using authorized user profile:', userProfile);\n      } else {\n        // Try to fetch the full profile from database (fallback)\n        try {\n          const {\n            data,\n            error\n          } = await supabase.from('user_profiles').select('*').eq('id', authUser.id).single();\n          if (!error && data) {\n            // Update with database profile if available\n            const userProfile = {\n              id: data.id,\n              name: data.full_name,\n              email: authUser.email || '',\n              role: data.role,\n              region: data.region,\n              regional_countries: data.regional_countries,\n              can_create_requests: data.can_create_requests,\n              can_approve_reject: data.can_approve_reject,\n              can_disburse: data.can_disburse,\n              view_only_access: data.view_only_access,\n              is_active: data.is_active,\n              avatar_url: data.avatar_url\n            };\n            setUser(userProfile);\n          }\n        } catch (dbError) {\n          console.log('Could not fetch database profile, using basic profile:', dbError);\n          // Keep the basic profile - this is not a critical error\n        }\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n  const signInWithMagicLink = async email => {\n    console.log('🔐 AuthContext signInWithMagicLink called with:', {\n      email\n    });\n\n    // Check if user is authorized\n    if (!isAuthorizedUser(email)) {\n      // Log unauthorized access attempt\n      await AuditTrailService.logSecurityEvent('unauthorized_access', `Unauthorized login attempt by ${email}`, {\n        user_email: email,\n        attempt_timestamp: new Date().toISOString()\n      });\n      return {\n        error: {\n          message: 'You are not authorized to access this system. Contact admin for assistance.',\n          name: 'AuthorizationError'\n        }\n      };\n    }\n    const {\n      error\n    } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        emailRedirectTo: `${window.location.origin}/dashboard`\n      }\n    });\n    console.log('🔐 Supabase magic link result:', {\n      error: (error === null || error === void 0 ? void 0 : error.message) || 'No error'\n    });\n    return {\n      error\n    };\n  };\n  const signOut = async () => {\n    console.log('🔐 AuthContext: Signing out user...');\n    try {\n      // Log session end before signing out\n      if (user) {\n        await AuditTrailService.logSessionEnd('logout');\n\n        // End user session in database\n        const sessionId = localStorage.getItem('adfd-session-id');\n        if (sessionId) {\n          await DatabaseService.endUserSession(sessionId);\n        }\n      }\n\n      // Clear session storage\n      localStorage.removeItem('adfd-session-start');\n      localStorage.removeItem('adfd-session-id');\n      localStorage.removeItem('adfd-remember-me');\n      localStorage.removeItem('adfd-saved-email');\n\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n      console.log('✅ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('❌ AuthContext: Error during signOut:', error);\n\n      // Log the error\n      await AuditTrailService.logError('signout_error', 'Failed to sign out properly', error instanceof Error ? error.stack : undefined);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n  const resetPassword = async email => {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email);\n    return {\n      error\n    };\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    signInWithMagicLink,\n    signOut,\n    resetPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"sIDOCMze9iVqwxkgWIhOu8vskSI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","getAuthorizedUser","isAuthorizedUser","AuditTrailService","DatabaseService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","data","fetchUserProfile","subscription","onAuthStateChange","event","logSessionEnd","unsubscribe","authUser","_authUser$user_metada","_authUser$email","_authUser$user_metada2","basicProfile","id","name","user_metadata","email","split","role","region","can_create_requests","can_approve_reject","can_disburse","view_only_access","is_active","authorizedUser","userProfile","regional_countries","avatar_url","sessionId","Date","now","localStorage","setItem","toString","initialize","createUserSession","user_id","session_token","access_token","ip_address","user_agent","navigator","userAgent","login_at","toISOString","remember_me","getItem","logUserActivity","user_role","user_department","department","login_method","session_id","console","log","error","from","select","eq","single","full_name","dbError","signInWithMagicLink","logSecurityEvent","user_email","attempt_timestamp","message","signInWithOtp","options","emailRedirectTo","window","location","origin","signOut","endUserSession","removeItem","logError","stack","resetPassword","resetPasswordForEmail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mamadouourydiallo/ADFI/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { User, Session, AuthError } from '@supabase/supabase-js';\nimport { getAuthorizedUser, isAuthorizedUser } from '../config/authorizedUsers';\nimport { AuditTrailService } from '../lib/auditTrail';\nimport { DatabaseService } from '../lib/database';\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  region?: string;\n  regional_countries?: string[];\n  can_create_requests: boolean;\n  can_approve_reject: boolean;\n  can_disburse: boolean;\n  view_only_access: boolean;\n  is_active: boolean;\n  avatar_url?: string;\n}\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  session: Session | null;\n  loading: boolean;\n  signInWithMagicLink: (email: string) => Promise<{ error: AuthError | null }>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session?.user) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setSession(session);\n      if (session?.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        // Log session end if user was previously logged in\n        if (event === 'SIGNED_OUT') {\n          await AuditTrailService.logSessionEnd('logout');\n        }\n        setUser(null);\n        setLoading(false);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const fetchUserProfile = async (authUser: User) => {\n    try {\n      // Create a basic profile from auth user data first\n      const basicProfile: UserProfile = {\n        id: authUser.id,\n        name: authUser.user_metadata?.name || authUser.email?.split('@')[0] || 'User',\n        email: authUser.email || '',\n        role: authUser.user_metadata?.role || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to get authorized user profile first\n      const authorizedUser = getAuthorizedUser(authUser.email || '');\n\n      if (authorizedUser) {\n        // Use authorized user profile\n        const userProfile: UserProfile = {\n          id: authUser.id,\n          name: authorizedUser.name,\n          email: authUser.email || '',\n          role: authorizedUser.role,\n          region: undefined,\n          regional_countries: undefined,\n          can_create_requests: authorizedUser.can_create_requests,\n          can_approve_reject: authorizedUser.can_approve_reject,\n          can_disburse: authorizedUser.can_disburse,\n          view_only_access: authorizedUser.view_only_access,\n          is_active: true,\n          avatar_url: undefined\n        };\n\n        // Initialize audit trail for this session\n        const sessionId = `session_${Date.now()}_${authUser.id}`;\n        localStorage.setItem('adfd-session-start', Date.now().toString());\n        localStorage.setItem('adfd-session-id', sessionId);\n\n        AuditTrailService.initialize(authUser.id, sessionId);\n\n        // Create user session record\n        await DatabaseService.createUserSession({\n          id: sessionId,\n          user_id: authUser.id,\n          session_token: session?.access_token || '',\n          ip_address: undefined, // Will be populated by audit service\n          user_agent: navigator.userAgent,\n          login_at: new Date().toISOString(),\n          is_active: true,\n          remember_me: localStorage.getItem('adfd-remember-me') === 'true'\n        });\n\n        // Log successful login\n        await AuditTrailService.logUserActivity('login', `User ${userProfile.name} logged in successfully`, {\n          user_role: userProfile.role,\n          user_department: authorizedUser.department,\n          login_method: 'magic_link',\n          session_id: sessionId\n        });\n\n        setUser(userProfile);\n        console.log('✅ Using authorized user profile:', userProfile);\n      } else {\n        // Try to fetch the full profile from database (fallback)\n        try {\n          const { data, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', authUser.id)\n            .single();\n\n          if (!error && data) {\n            // Update with database profile if available\n            const userProfile: UserProfile = {\n              id: data.id,\n              name: data.full_name,\n              email: authUser.email || '',\n              role: data.role,\n              region: data.region,\n              regional_countries: data.regional_countries,\n              can_create_requests: data.can_create_requests,\n              can_approve_reject: data.can_approve_reject,\n              can_disburse: data.can_disburse,\n              view_only_access: data.view_only_access,\n              is_active: data.is_active,\n              avatar_url: data.avatar_url\n            };\n            setUser(userProfile);\n          }\n        } catch (dbError) {\n          console.log('Could not fetch database profile, using basic profile:', dbError);\n          // Keep the basic profile - this is not a critical error\n        }\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n\n  const signInWithMagicLink = async (email: string) => {\n    console.log('🔐 AuthContext signInWithMagicLink called with:', { email });\n\n    // Check if user is authorized\n    if (!isAuthorizedUser(email)) {\n      // Log unauthorized access attempt\n      await AuditTrailService.logSecurityEvent(\n        'unauthorized_access',\n        `Unauthorized login attempt by ${email}`,\n        {\n          user_email: email,\n          attempt_timestamp: new Date().toISOString()\n        }\n      );\n\n      return {\n        error: {\n          message: 'You are not authorized to access this system. Contact admin for assistance.',\n          name: 'AuthorizationError'\n        } as AuthError\n      };\n    }\n\n    const { error } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        emailRedirectTo: `${window.location.origin}/dashboard`\n      }\n    });\n\n    console.log('🔐 Supabase magic link result:', { error: error?.message || 'No error' });\n    return { error };\n  };\n\n\n\n  const signOut = async () => {\n    console.log('🔐 AuthContext: Signing out user...');\n\n    try {\n      // Log session end before signing out\n      if (user) {\n        await AuditTrailService.logSessionEnd('logout');\n\n        // End user session in database\n        const sessionId = localStorage.getItem('adfd-session-id');\n        if (sessionId) {\n          await DatabaseService.endUserSession(sessionId);\n        }\n      }\n\n      // Clear session storage\n      localStorage.removeItem('adfd-session-start');\n      localStorage.removeItem('adfd-session-id');\n      localStorage.removeItem('adfd-remember-me');\n      localStorage.removeItem('adfd-saved-email');\n\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n\n      console.log('✅ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('❌ AuthContext: Error during signOut:', error);\n\n      // Log the error\n      await AuditTrailService.logError('signout_error', 'Failed to sign out properly', error instanceof Error ? error.stack : undefined);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    return { error };\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signInWithMagicLink,\n    signOut,\n    resetPassword\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}