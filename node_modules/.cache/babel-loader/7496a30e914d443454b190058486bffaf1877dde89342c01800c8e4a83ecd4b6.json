{"ast":null,"code":"// Authorized ADFD Team Members\n// Only these users are allowed to access the system\n\nexport const AUTHORIZED_USERS = [\n// Archive Team\n{\n  email: 'aalzaabi@adfd.ae',\n  name: 'Ahmed Al Zaabi',\n  role: 'archive_team',\n  department: 'Archive Team',\n  can_create_requests: true,\n  can_approve_reject: false,\n  can_disburse: false,\n  view_only_access: false\n}, {\n  email: 'mkalmheire@adfd.ae',\n  name: 'Meera Al Mehairi',\n  role: 'archive_team',\n  department: 'Archive Team',\n  can_create_requests: true,\n  can_approve_reject: false,\n  can_disburse: false,\n  view_only_access: false\n},\n// Observer Roles\n{\n  email: 'falhamadi@adfd.ae',\n  name: 'Fatima Al Hammadi',\n  role: 'observer',\n  department: 'Observer',\n  can_create_requests: false,\n  can_approve_reject: false,\n  can_disburse: false,\n  view_only_access: true\n}, {\n  email: 'aalhousani@adfd.ae',\n  name: 'Adel Al Hosani',\n  role: 'observer',\n  department: 'Observer',\n  can_create_requests: false,\n  can_approve_reject: false,\n  can_disburse: false,\n  view_only_access: true\n},\n// Regional Operations\n{\n  email: 'aalderei@adfd.ae',\n  name: 'Ali Al Derie',\n  role: 'operations_team',\n  department: 'Regional Operations',\n  can_create_requests: false,\n  can_approve_reject: true,\n  can_disburse: false,\n  view_only_access: false\n}, {\n  email: 'aalkalbani@adfd.ae',\n  name: 'Ahmed Al Kalbani',\n  role: 'operations_team',\n  department: 'Regional Operations',\n  can_create_requests: false,\n  can_approve_reject: true,\n  can_disburse: false,\n  view_only_access: false\n}, {\n  email: 'amalmansoori@adfd.ae',\n  name: 'Abdulla Al Mansoori',\n  role: 'operations_team',\n  department: 'Regional Operations',\n  can_create_requests: false,\n  can_approve_reject: true,\n  can_disburse: false,\n  view_only_access: false\n},\n// Core Banking\n{\n  email: 'asiddique@adfd.ae',\n  name: 'Ahmed Siddique',\n  role: 'core_banking',\n  department: 'Core Banking',\n  can_create_requests: false,\n  can_approve_reject: false,\n  can_disburse: true,\n  view_only_access: false\n}, {\n  email: 'yjamous@adfd.ae',\n  name: 'Yazan Jamous',\n  role: 'core_banking',\n  department: 'Core Banking',\n  can_create_requests: false,\n  can_approve_reject: false,\n  can_disburse: true,\n  view_only_access: false\n}, {\n  email: 'ahmotiwala@adfd.ae',\n  name: 'Ameer Hamza',\n  role: 'core_banking',\n  department: 'Core Banking',\n  can_create_requests: false,\n  can_approve_reject: false,\n  can_disburse: true,\n  view_only_access: false\n},\n// Admin (Exception for testing)\n{\n  email: 'Mamadouourydiallo819@gmail.com',\n  name: 'Mitty Mamadouourydiallo',\n  role: 'admin',\n  department: 'Administration',\n  can_create_requests: true,\n  can_approve_reject: true,\n  can_disburse: true,\n  view_only_access: false\n}];\n\n// Helper functions\nexport const isAuthorizedUser = email => {\n  const normalizedEmail = email.toLowerCase().trim();\n  return AUTHORIZED_USERS.some(user => user.email.toLowerCase() === normalizedEmail);\n};\nexport const getAuthorizedUser = email => {\n  const normalizedEmail = email.toLowerCase().trim();\n  return AUTHORIZED_USERS.find(user => user.email.toLowerCase() === normalizedEmail) || null;\n};\nexport const validateEmailDomain = email => {\n  const adminEmail = 'Mamadouourydiallo819@gmail.com';\n  const allowedDomain = '@adfd.ae';\n\n  // Normalize email for comparison (case-insensitive)\n  const normalizedEmail = email.toLowerCase().trim();\n  const normalizedAdminEmail = adminEmail.toLowerCase();\n\n  // Allow admin email as exception (case-insensitive)\n  if (normalizedEmail === normalizedAdminEmail) {\n    return true;\n  }\n\n  // Check if email ends with allowed domain (case-insensitive)\n  return normalizedEmail.endsWith(allowedDomain.toLowerCase());\n};","map":{"version":3,"names":["AUTHORIZED_USERS","email","name","role","department","can_create_requests","can_approve_reject","can_disburse","view_only_access","isAuthorizedUser","normalizedEmail","toLowerCase","trim","some","user","getAuthorizedUser","find","validateEmailDomain","adminEmail","allowedDomain","normalizedAdminEmail","endsWith"],"sources":["/Users/mamadouourydiallo/ADFI/src/config/authorizedUsers.ts"],"sourcesContent":["// Authorized ADFD Team Members\n// Only these users are allowed to access the system\n\nexport interface AuthorizedUser {\n  email: string;\n  name: string;\n  role: string;\n  department: string;\n  can_create_requests: boolean;\n  can_approve_reject: boolean;\n  can_disburse: boolean;\n  view_only_access: boolean;\n}\n\nexport const AUTHORIZED_USERS: AuthorizedUser[] = [\n  // Archive Team\n  {\n    email: 'aalzaabi@adfd.ae',\n    name: 'Ahmed Al Zaabi',\n    role: 'archive_team',\n    department: 'Archive Team',\n    can_create_requests: true,\n    can_approve_reject: false,\n    can_disburse: false,\n    view_only_access: false\n  },\n  {\n    email: 'mkalmheire@adfd.ae',\n    name: 'Meera Al Mehairi',\n    role: 'archive_team',\n    department: 'Archive Team',\n    can_create_requests: true,\n    can_approve_reject: false,\n    can_disburse: false,\n    view_only_access: false\n  },\n\n  // Observer Roles\n  {\n    email: 'falhamadi@adfd.ae',\n    name: 'Fatima Al Hammadi',\n    role: 'observer',\n    department: 'Observer',\n    can_create_requests: false,\n    can_approve_reject: false,\n    can_disburse: false,\n    view_only_access: true\n  },\n  {\n    email: 'aalhousani@adfd.ae',\n    name: 'Adel Al Hosani',\n    role: 'observer',\n    department: 'Observer',\n    can_create_requests: false,\n    can_approve_reject: false,\n    can_disburse: false,\n    view_only_access: true\n  },\n\n  // Regional Operations\n  {\n    email: 'aalderei@adfd.ae',\n    name: 'Ali Al Derie',\n    role: 'operations_team',\n    department: 'Regional Operations',\n    can_create_requests: false,\n    can_approve_reject: true,\n    can_disburse: false,\n    view_only_access: false\n  },\n  {\n    email: 'aalkalbani@adfd.ae',\n    name: 'Ahmed Al Kalbani',\n    role: 'operations_team',\n    department: 'Regional Operations',\n    can_create_requests: false,\n    can_approve_reject: true,\n    can_disburse: false,\n    view_only_access: false\n  },\n  {\n    email: 'amalmansoori@adfd.ae',\n    name: 'Abdulla Al Mansoori',\n    role: 'operations_team',\n    department: 'Regional Operations',\n    can_create_requests: false,\n    can_approve_reject: true,\n    can_disburse: false,\n    view_only_access: false\n  },\n\n  // Core Banking\n  {\n    email: 'asiddique@adfd.ae',\n    name: 'Ahmed Siddique',\n    role: 'core_banking',\n    department: 'Core Banking',\n    can_create_requests: false,\n    can_approve_reject: false,\n    can_disburse: true,\n    view_only_access: false\n  },\n  {\n    email: 'yjamous@adfd.ae',\n    name: 'Yazan Jamous',\n    role: 'core_banking',\n    department: 'Core Banking',\n    can_create_requests: false,\n    can_approve_reject: false,\n    can_disburse: true,\n    view_only_access: false\n  },\n  {\n    email: 'ahmotiwala@adfd.ae',\n    name: 'Ameer Hamza',\n    role: 'core_banking',\n    department: 'Core Banking',\n    can_create_requests: false,\n    can_approve_reject: false,\n    can_disburse: true,\n    view_only_access: false\n  },\n\n  // Admin (Exception for testing)\n  {\n    email: 'Mamadouourydiallo819@gmail.com',\n    name: 'Mitty Mamadouourydiallo',\n    role: 'admin',\n    department: 'Administration',\n    can_create_requests: true,\n    can_approve_reject: true,\n    can_disburse: true,\n    view_only_access: false\n  }\n];\n\n// Helper functions\nexport const isAuthorizedUser = (email: string): boolean => {\n  const normalizedEmail = email.toLowerCase().trim();\n  return AUTHORIZED_USERS.some(user => \n    user.email.toLowerCase() === normalizedEmail\n  );\n};\n\nexport const getAuthorizedUser = (email: string): AuthorizedUser | null => {\n  const normalizedEmail = email.toLowerCase().trim();\n  return AUTHORIZED_USERS.find(user => \n    user.email.toLowerCase() === normalizedEmail\n  ) || null;\n};\n\nexport const validateEmailDomain = (email: string): boolean => {\n  const adminEmail = 'Mamadouourydiallo819@gmail.com';\n  const allowedDomain = '@adfd.ae';\n\n  // Normalize email for comparison (case-insensitive)\n  const normalizedEmail = email.toLowerCase().trim();\n  const normalizedAdminEmail = adminEmail.toLowerCase();\n\n  // Allow admin email as exception (case-insensitive)\n  if (normalizedEmail === normalizedAdminEmail) {\n    return true;\n  }\n\n  // Check if email ends with allowed domain (case-insensitive)\n  return normalizedEmail.endsWith(allowedDomain.toLowerCase());\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}