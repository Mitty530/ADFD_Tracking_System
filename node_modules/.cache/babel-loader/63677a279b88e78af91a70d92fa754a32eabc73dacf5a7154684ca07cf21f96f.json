{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{supabase}from'../lib/supabase';import{getAuthorizedUser,isAuthorizedUser}from'../config/authorizedUsers';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[session,setSession]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Get initial session\nsupabase.auth.getSession().then(_ref2=>{let{data:{session}}=_ref2;setSession(session);if(session!==null&&session!==void 0&&session.user){fetchUserProfile(session.user);}else{setLoading(false);}});// Listen for auth changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(_event,session)=>{setSession(session);if(session!==null&&session!==void 0&&session.user){await fetchUserProfile(session.user);}else{setUser(null);setLoading(false);}});return()=>subscription.unsubscribe();},[]);const fetchUserProfile=async authUser=>{try{var _authUser$user_metada,_authUser$email,_authUser$user_metada2;// Create a basic profile from auth user data first\nconst basicProfile={id:authUser.id,name:((_authUser$user_metada=authUser.user_metadata)===null||_authUser$user_metada===void 0?void 0:_authUser$user_metada.name)||((_authUser$email=authUser.email)===null||_authUser$email===void 0?void 0:_authUser$email.split('@')[0])||'User',email:authUser.email||'',role:((_authUser$user_metada2=authUser.user_metadata)===null||_authUser$user_metada2===void 0?void 0:_authUser$user_metada2.role)||'admin',region:'global',can_create_requests:true,can_approve_reject:true,can_disburse:true,view_only_access:false,is_active:true};// Set the basic profile immediately to allow login\nsetUser(basicProfile);setLoading(false);// Try to get authorized user profile first\nconst authorizedUser=getAuthorizedUser(authUser.email||'');if(authorizedUser){// Use authorized user profile\nconst userProfile={id:authUser.id,name:authorizedUser.name,email:authUser.email||'',role:authorizedUser.role,region:undefined,regional_countries:undefined,can_create_requests:authorizedUser.can_create_requests,can_approve_reject:authorizedUser.can_approve_reject,can_disburse:authorizedUser.can_disburse,view_only_access:authorizedUser.view_only_access,is_active:true,avatar_url:undefined};setUser(userProfile);console.log('✅ Using authorized user profile:',userProfile);}else{// Try to fetch the full profile from database (fallback)\ntry{const{data,error}=await supabase.from('user_profiles').select('*').eq('id',authUser.id).single();if(!error&&data){// Update with database profile if available\nconst userProfile={id:data.id,name:data.full_name,email:authUser.email||'',role:data.role,region:data.region,regional_countries:data.regional_countries,can_create_requests:data.can_create_requests,can_approve_reject:data.can_approve_reject,can_disburse:data.can_disburse,view_only_access:data.view_only_access,is_active:data.is_active,avatar_url:data.avatar_url};setUser(userProfile);}}catch(dbError){console.log('Could not fetch database profile, using basic profile:',dbError);// Keep the basic profile - this is not a critical error\n}}}catch(error){console.error('Error in fetchUserProfile:',error);setLoading(false);}};const signInWithMagicLink=async email=>{console.log('🔐 AuthContext signInWithMagicLink called with:',{email});// Check if user is authorized\nif(!isAuthorizedUser(email)){return{error:{message:'You are not authorized to access this system. Contact admin for assistance.',name:'AuthorizationError'}};}const{error}=await supabase.auth.signInWithOtp({email,options:{emailRedirectTo:`${window.location.origin}/dashboard`}});console.log('🔐 Supabase magic link result:',{error:(error===null||error===void 0?void 0:error.message)||'No error'});return{error};};const signOut=async()=>{console.log('🔐 AuthContext: Signing out user...');try{// Sign out from Supabase\nawait supabase.auth.signOut();// Clear local state\nsetUser(null);setSession(null);console.log('✅ AuthContext: User signed out successfully');}catch(error){console.error('❌ AuthContext: Error during signOut:',error);// Even if Supabase signOut fails, clear local state\nsetUser(null);setSession(null);}};const resetPassword=async email=>{const{error}=await supabase.auth.resetPasswordForEmail(email);return{error};};const value={user,session,loading,signInWithMagicLink,signOut,resetPassword};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","getAuthorizedUser","isAuthorizedUser","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","session","setSession","loading","setLoading","auth","getSession","then","_ref2","data","fetchUserProfile","subscription","onAuthStateChange","_event","unsubscribe","authUser","_authUser$user_metada","_authUser$email","_authUser$user_metada2","basicProfile","id","name","user_metadata","email","split","role","region","can_create_requests","can_approve_reject","can_disburse","view_only_access","is_active","authorizedUser","userProfile","regional_countries","avatar_url","console","log","error","from","select","eq","single","full_name","dbError","signInWithMagicLink","message","signInWithOtp","options","emailRedirectTo","window","location","origin","signOut","resetPassword","resetPasswordForEmail","value","Provider"],"sources":["/Users/mamadouourydiallo/ADFI/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { User, Session, AuthError } from '@supabase/supabase-js';\nimport { getAuthorizedUser, isAuthorizedUser } from '../config/authorizedUsers';\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  region?: string;\n  regional_countries?: string[];\n  can_create_requests: boolean;\n  can_approve_reject: boolean;\n  can_disburse: boolean;\n  view_only_access: boolean;\n  is_active: boolean;\n  avatar_url?: string;\n}\n\ninterface AuthContextType {\n  user: UserProfile | null;\n  session: Session | null;\n  loading: boolean;\n  signInWithMagicLink: (email: string) => Promise<{ error: AuthError | null }>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<{ error: AuthError | null }>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      if (session?.user) {\n        fetchUserProfile(session.user);\n      } else {\n        setLoading(false);\n      }\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      setSession(session);\n      if (session?.user) {\n        await fetchUserProfile(session.user);\n      } else {\n        setUser(null);\n        setLoading(false);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const fetchUserProfile = async (authUser: User) => {\n    try {\n      // Create a basic profile from auth user data first\n      const basicProfile: UserProfile = {\n        id: authUser.id,\n        name: authUser.user_metadata?.name || authUser.email?.split('@')[0] || 'User',\n        email: authUser.email || '',\n        role: authUser.user_metadata?.role || 'admin',\n        region: 'global',\n        can_create_requests: true,\n        can_approve_reject: true,\n        can_disburse: true,\n        view_only_access: false,\n        is_active: true\n      };\n\n      // Set the basic profile immediately to allow login\n      setUser(basicProfile);\n      setLoading(false);\n\n      // Try to get authorized user profile first\n      const authorizedUser = getAuthorizedUser(authUser.email || '');\n\n      if (authorizedUser) {\n        // Use authorized user profile\n        const userProfile: UserProfile = {\n          id: authUser.id,\n          name: authorizedUser.name,\n          email: authUser.email || '',\n          role: authorizedUser.role,\n          region: undefined,\n          regional_countries: undefined,\n          can_create_requests: authorizedUser.can_create_requests,\n          can_approve_reject: authorizedUser.can_approve_reject,\n          can_disburse: authorizedUser.can_disburse,\n          view_only_access: authorizedUser.view_only_access,\n          is_active: true,\n          avatar_url: undefined\n        };\n        setUser(userProfile);\n        console.log('✅ Using authorized user profile:', userProfile);\n      } else {\n        // Try to fetch the full profile from database (fallback)\n        try {\n          const { data, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', authUser.id)\n            .single();\n\n          if (!error && data) {\n            // Update with database profile if available\n            const userProfile: UserProfile = {\n              id: data.id,\n              name: data.full_name,\n              email: authUser.email || '',\n              role: data.role,\n              region: data.region,\n              regional_countries: data.regional_countries,\n              can_create_requests: data.can_create_requests,\n              can_approve_reject: data.can_approve_reject,\n              can_disburse: data.can_disburse,\n              view_only_access: data.view_only_access,\n              is_active: data.is_active,\n              avatar_url: data.avatar_url\n            };\n            setUser(userProfile);\n          }\n        } catch (dbError) {\n          console.log('Could not fetch database profile, using basic profile:', dbError);\n          // Keep the basic profile - this is not a critical error\n        }\n      }\n    } catch (error) {\n      console.error('Error in fetchUserProfile:', error);\n      setLoading(false);\n    }\n  };\n\n  const signInWithMagicLink = async (email: string) => {\n    console.log('🔐 AuthContext signInWithMagicLink called with:', { email });\n\n    // Check if user is authorized\n    if (!isAuthorizedUser(email)) {\n      return {\n        error: {\n          message: 'You are not authorized to access this system. Contact admin for assistance.',\n          name: 'AuthorizationError'\n        } as AuthError\n      };\n    }\n\n    const { error } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        emailRedirectTo: `${window.location.origin}/dashboard`\n      }\n    });\n\n    console.log('🔐 Supabase magic link result:', { error: error?.message || 'No error' });\n    return { error };\n  };\n\n\n\n  const signOut = async () => {\n    console.log('🔐 AuthContext: Signing out user...');\n\n    try {\n      // Sign out from Supabase\n      await supabase.auth.signOut();\n\n      // Clear local state\n      setUser(null);\n      setSession(null);\n\n      console.log('✅ AuthContext: User signed out successfully');\n    } catch (error) {\n      console.error('❌ AuthContext: Error during signOut:', error);\n\n      // Even if Supabase signOut fails, clear local state\n      setUser(null);\n      setSession(null);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    return { error };\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    signInWithMagicLink,\n    signOut,\n    resetPassword\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}